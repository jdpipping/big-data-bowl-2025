library(tidyverse)

# Stats_ByFullPlay_Final was defined in the "Aggregating Frames to Plays" GitHub file
# Stats_ByFullPlay_All9Weeks is a CSV with same format, defined on JP's computer

# Read in data if necessary: 
# Stats_ByFullPlay_Final <- fread("Stats_ByFullPlay_Final.csv")
Stats_ByFullPlay_All9Weeks <- fread("Stats_ByFullPlay_All9Weeks.csv")
# mean(Stats_ByFullPlay_All9Weeks$PostSnap_MOF_Num) ... NOTE that across all of our project's plays, MOFO rate is 39.6%

colnames(Stats_ByFullPlay_9Weeks) # recall that Snap_Entropy is the continuous play-level one (HighEntropy is binary)

# Before we make these matrices, adjust Min_PreSnap_X_vel_component_AnySafety and Min_PreSnap_X_acc_component_AnySafety
# This is to get rid of the "double negative" idea ... in other words, make a high velocity toward the ball show up as a positive number
Stats_ByFullPlay_9Weeks <- Stats_ByFullPlay_9Weeks %>% 
  mutate(Max_PreSnap_X_vel_TowardBall_AnySafety = -1 * Min_PreSnap_X_vel_component_AnySafety)
Stats_ByFullPlay_9Weeks <- Stats_ByFullPlay_9Weeks %>% 
  mutate(Max_PreSnap_X_acc_TowardBall_AnySafety = -1 * Min_PreSnap_X_acc_component_AnySafety)
Stats_ByFullPlay_9Weeks <- Stats_ByFullPlay_9Weeks %>% select(-c("Min_PreSnap_X_vel_component_AnySafety", "Min_PreSnap_X_acc_component_AnySafety"))

# Repeat the same idea to avoid the "double negative" that we used for pre-snap vertical velocity
# I.e., now the vertical velocity will show up as positive if the safety is moving closer to LOS at the snap
Stats_ByFullPlay_All9Weeks <- Stats_ByFullPlay_All9Weeks %>% 
  mutate(Max_X_vel_TowardBall_AnySafety_AtSnap = -1 * Max_X_vel_component_AnySafety_AtSnap)
Stats_ByFullPlay_All9Weeks <- Stats_ByFullPlay_All9Weeks %>% 
  mutate(Min_X_vel_TowardBall_AnySafety_AtSnap = -1 * Min_X_vel_component_AnySafety_AtSnap)
Stats_ByFullPlay_All9Weeks <- Stats_ByFullPlay_All9Weeks %>% select(-c("Max_X_vel_component_AnySafety_AtSnap", "Min_X_vel_component_AnySafety_AtSnap"))

Stats_ByFullPlay_2High <- Stats_ByFullPlay_All9Weeks %>% filter(num_safeties_pre_snap == 2)
Stats_ByFullPlay_1High <- Stats_ByFullPlay_All9Weeks %>% filter(num_safeties_pre_snap == 1)

MOFO_Features_AllPlays <- Stats_ByFullPlay_All9Weeks %>%
  select(c("PostSnap_MOF_Num", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap", "Min_X_vel_TowardBall_AnySafety_AtSnap",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Min_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety",
           "Min_Y_AccTowardMOF_AtSnap_AnySafety", "Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap", "Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap"))

corr_matrix_MOFO_AllPlays <- MOFO_Features_AllPlays %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with PostSnap_MOF_Num
corr_df_MOFO_AllPlays <- as.data.frame(corr_matrix_MOFO_AllPlays)
# View(corr_df_MOFO_AllPlays %>% arrange(desc(PostSnap_MOF_Num)))
rm(corr_matrix_MOFO_AllPlays)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_MOFO_AllPlays <- corr_df_MOFO_AllPlays %>% filter(abs(PostSnap_MOF_Num) >= 0.25)
rownames(top_variables_MOFO_AllPlays) # keep in mind PostSnap_MOF_Num obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays[, colnames(top_variables_MOFO_AllPlays) %in% rownames(top_variables_MOFO_AllPlays)]

MOFO_Features_2High <- Stats_ByFullPlay_2High %>%
  select(c("PostSnap_MOF_Num", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap", "Min_X_vel_TowardBall_AnySafety_AtSnap",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Min_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety",
           "Min_Y_AccTowardMOF_AtSnap_AnySafety", "Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap", "Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap"))

corr_matrix_MOFO_2High <- MOFO_Features_2High %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with PostSnap_MOF_Num
corr_df_MOFO_2High <- as.data.frame(corr_matrix_MOFO_2High)
# View(corr_df_MOFO_2High %>% arrange(desc(PostSnap_MOF_Num)))
rm(corr_matrix_MOFO_2High)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_MOFO_2High <- corr_df_MOFO_2High %>% filter(abs(PostSnap_MOF_Num) >= 0.25)
rownames(top_variables_MOFO_2High) # keep in mind PostSnap_MOF_Num obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_MOFO_2High <- top_variables_MOFO_2High[, colnames(top_variables_MOFO_2High) %in% rownames(top_variables_MOFO_2High)]

MOFO_Features_1High <- Stats_ByFullPlay_1High %>%
  select(c("PostSnap_MOF_Num", "min_SafetyAbsHorizDistToMOF_PreSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Max_Y_AbsSpeed_AtSnap_AnySafety", 
           "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety"))

corr_matrix_MOFO_1High <- MOFO_Features_1High %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with PostSnap_MOF_Num
corr_df_MOFO_1High <- as.data.frame(corr_matrix_MOFO_1High)
# View(corr_df_MOFO_1High %>% arrange(desc(PostSnap_MOF_Num)))
rm(corr_matrix_MOFO_1High)

# Now take all variables with at least a correlation of 0.1 in either direction (lower standard b/c we're picking from fewer variables)
top_variables_MOFO_1High <- corr_df_MOFO_1High %>% filter(abs(PostSnap_MOF_Num) >= 0.1)
rownames(top_variables_MOFO_1High) # keep in mind PostSnap_MOF_Num obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_MOFO_1High <- top_variables_MOFO_1High[, colnames(top_variables_MOFO_1High) %in% rownames(top_variables_MOFO_1High)]

Entropy_Features_AllPlays <- Stats_ByFullPlay_All9Weeks %>%
  select(c("Snap_Entropy", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap", "Min_X_vel_TowardBall_AnySafety_AtSnap",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Min_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety",
           "Min_Y_AccTowardMOF_AtSnap_AnySafety", "Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap", "Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap"))

corr_matrix_Entropy_AllPlays <- Entropy_Features_AllPlays %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with Snap_Entropy
corr_df_Entropy_AllPlays <- as.data.frame(corr_matrix_Entropy_AllPlays)
# View(corr_df_Entropy_AllPlays %>% arrange(desc(Snap_Entropy)))
rm(corr_matrix_Entropy_AllPlays)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_Entropy_AllPlays <- corr_df_Entropy_AllPlays %>% filter(abs(Snap_Entropy) >= 0.25)
rownames(top_variables_Entropy_AllPlays) # keep in mind Snap_Entropy obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_Entropy_AllPlays <- top_variables_Entropy_AllPlays[, colnames(top_variables_Entropy_AllPlays) %in% rownames(top_variables_Entropy_AllPlays)]

Entropy_Features_2High <- Stats_ByFullPlay_2High %>%
  select(c("Snap_Entropy", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap", "Min_X_vel_TowardBall_AnySafety_AtSnap", 
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Min_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety",
           "Min_Y_AccTowardMOF_AtSnap_AnySafety", "Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap", "Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap"))

corr_matrix_Entropy_2High <- Entropy_Features_2High %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with Snap_Entropy
corr_df_Entropy_2High <- as.data.frame(corr_matrix_Entropy_2High)
# View(corr_df_Entropy_2High %>% arrange(desc(Snap_Entropy)))
rm(corr_matrix_Entropy_2High)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_Entropy_2High <- corr_df_Entropy_2High %>% filter(abs(Snap_Entropy) >= 0.25)
rownames(top_variables_Entropy_2High) # keep in mind Snap_Entropy obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_Entropy_2High <- top_variables_Entropy_2High[, colnames(top_variables_Entropy_2High) %in% rownames(top_variables_Entropy_2High)]

Entropy_Features_1High <- Stats_ByFullPlay_1High %>%
  select(c("Snap_Entropy", "min_SafetyAbsHorizDistToMOF_PreSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Max_Y_AbsSpeed_AtSnap_AnySafety", 
           "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety"))

corr_matrix_Entropy_1High <- Entropy_Features_1High %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with Snap_Entropy
corr_df_Entropy_1High <- as.data.frame(corr_matrix_Entropy_1High)
# View(corr_df_Entropy_1High %>% arrange(desc(Snap_Entropy)))
rm(corr_matrix_Entropy_1High)

# Now take all variables with at least a correlation of 0.25 in either direction 
top_variables_Entropy_1High <- corr_df_Entropy_1High %>% filter(abs(Snap_Entropy) >= 0.25)
rownames(top_variables_Entropy_1High) # keep in mind Snap_Entropy obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_Entropy_1High <- top_variables_Entropy_1High[, colnames(top_variables_Entropy_1High) %in% rownames(top_variables_Entropy_1High)]

PredictedMOFO_Features_AllPlays <- Stats_ByFullPlay_All9Weeks %>%
  select(c("MOFO_probability_FDA", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap", "Min_X_vel_TowardBall_AnySafety_AtSnap",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Min_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety",
           "Min_Y_AccTowardMOF_AtSnap_AnySafety", "Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap", "Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap"))

corr_matrix_PredictedMOFO_AllPlays <- PredictedMOFO_Features_AllPlays %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with MOFO_probability_FDA
corr_df_PredictedMOFO_AllPlays <- as.data.frame(corr_matrix_PredictedMOFO_AllPlays)
# View(corr_df_PredictedMOFO_AllPlays %>% arrange(desc(MOFO_probability_FDA)))
rm(corr_matrix_PredictedMOFO_AllPlays)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_PredictedMOFO_AllPlays <- corr_df_PredictedMOFO_AllPlays %>% filter(abs(MOFO_probability_FDA) >= 0.25)
rownames(top_variables_PredictedMOFO_AllPlays) # keep in mind MOFO_probability_FDA obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_PredictedMOFO_AllPlays <- top_variables_PredictedMOFO_AllPlays[, colnames(top_variables_PredictedMOFO_AllPlays) %in% rownames(top_variables_PredictedMOFO_AllPlays)]

PredictedMOFO_Features_2High <- Stats_ByFullPlay_2High %>%
  select(c("MOFO_probability_FDA", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap", "Min_X_vel_TowardBall_AnySafety_AtSnap",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Min_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety",
           "Min_Y_AccTowardMOF_AtSnap_AnySafety", "Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap", "Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap"))

corr_matrix_PredictedMOFO_2High <- PredictedMOFO_Features_2High %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with MOFO_probability_FDA
corr_df_PredictedMOFO_2High <- as.data.frame(corr_matrix_PredictedMOFO_2High)
# View(corr_df_PredictedMOFO_2High %>% arrange(desc(MOFO_probability_FDA)))
rm(corr_matrix_PredictedMOFO_2High)

# Now take all variables with at least a correlation of 0.35 in either direction
top_variables_PredictedMOFO_2High <- corr_df_PredictedMOFO_2High %>% filter(abs(MOFO_probability_FDA) >= 0.35)
rownames(top_variables_PredictedMOFO_2High) # keep in mind MOFO_probability_FDA obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High[, colnames(top_variables_PredictedMOFO_2High) %in% rownames(top_variables_PredictedMOFO_2High)]

PredictedMOFO_Features_1High <- Stats_ByFullPlay_1High %>%
  select(c("MOFO_probability_FDA", "min_SafetyAbsHorizDistToMOF_PreSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_X_vel_TowardBall_AnySafety_AtSnap", 
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Max_Y_AbsSpeed_AtSnap_AnySafety", 
           "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety"))

corr_matrix_PredictedMOFO_1High <- PredictedMOFO_Features_1High %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with MOFO_probability_FDA
corr_df_PredictedMOFO_1High <- as.data.frame(corr_matrix_PredictedMOFO_1High)
# View(corr_df_PredictedMOFO_1High %>% arrange(desc(MOFO_probability_FDA)))
rm(corr_matrix_PredictedMOFO_1High)

# Now take all variables with at least a correlation of 0.2 in either direction 
top_variables_PredictedMOFO_1High <- corr_df_PredictedMOFO_1High %>% filter(abs(MOFO_probability_FDA) >= 0.2)
rownames(top_variables_PredictedMOFO_1High) # keep in mind MOFO_probability_FDA obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_PredictedMOFO_1High <- top_variables_PredictedMOFO_1High[, colnames(top_variables_PredictedMOFO_1High) %in% rownames(top_variables_PredictedMOFO_1High)]

# Diagnose features we should be graphing, starting with actual MOFO rate
# View(top_variables_MOFO_AllPlays)
# All plays: X_Diff_BetweenSafeties_AtSnap, X_Vel_Diff_BetweenSafeties_AtSnap, Max_Y_AbsDistFromMOF_AtSnap_AnySafety AND/OR min_SafetyAbsHorizDistToMOF_PreSnap
Plot6 <- ggplot(data = Stats_ByFullPlay_All9Weeks) +
  # geom_point(aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 10), ylim = c(0, 1)) +
  labs(x = "Vertical Stagger b/w Safeties at Snap (Yards)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Vertical Stagger Between Safeties",
       subtitle = "Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 4381)",
       caption = "Vertical Stagger: vertical distance b/w safeties at time of snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot7 <- ggplot(data = Stats_ByFullPlay_All9Weeks) +
  # geom_point(aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 6), ylim = c(0, 1)) +
  labs(x = "Difference in Vertical Velocities b/w Safeties at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Difference in Vertical Velocities b/w Safeties at Snap",
       subtitle = "Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 4381)",
       caption = "Vertical Velocities: toward LOS is negative, away from LOS is positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot8 <- ggplot(data = Stats_ByFullPlay_All9Weeks) +
  # geom_point(aes(x = Max_Y_AbsDistFromMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_Y_AbsDistFromMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 14, 2)) +
  coord_cartesian(xlim = c(0, 14), ylim = c(0, 1)) +
  labs(x = "Highest Horiz Distance from MOF by a Safety at the Snap (Yards)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Highest Horiz Distance from MOF by a Safety at Snap",
       subtitle = "Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 4381)",
       caption = "Horizontal Distance from MOF: either right or left is positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot9 <- ggplot(data = Stats_ByFullPlay_All9Weeks) +
  # geom_point(aes(x =  min_SafetyAbsHorizDistToMOF_PreSnap, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x =  min_SafetyAbsHorizDistToMOF_PreSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 10), ylim = c(0, 1)) +
  labs(x = "Minimum Pre-Snap Horizontal Distance from MOF by a Safety (Yards)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Minimum Pre-Snap Horizontal Distance from MOF by a Safety",
       subtitle = "Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 4381)",
       caption = "Horizontal Distance from MOF: either right or left is positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

grid.arrange(Plot6, Plot7, ncol = 2)
# grid.arrange(Plot6, Plot7, Plot8, Plot9, ncol = 4) ... don't use, too crowded
grid.arrange(Plot6, Plot7, Plot8, Plot9, nrow = 2, ncol = 2)

# View(top_variables_MOFO_2High)
# 2-high: X_Diff_BetweenSafeties_AtSnap, Max_VertCreptDistance_AnySafety, X_Vel_Diff_BetweenSafeties_AtSnap AND/OR Max_PreSnap_X_vel_TowardBall_AnySafety
Plot10 <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 10), ylim = c(0, 1)) +
  labs(x = "Vertical Stagger b/w Safeties at Snap (Yards)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Vertical Stagger Between Safeties",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Stagger: vertical distance b/w safeties at time of snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot11 <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 6), ylim = c(0, 1)) +
  labs(x = "Difference in Vertical Velocities b/w Safeties at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Difference in Vertical Velocities b/w Safeties at Snap",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Velocities: toward LOS is negative, away from LOS is positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot12 <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = Max_VertCreptDistance_AnySafety, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_VertCreptDistance_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-4, 8), ylim = c(0, 1)) +
  labs(x = "Highest Vertical 'Creep' Distance by a Safety (Yards)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Highest Vertical 'Creep' Distance by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical 'Creep' Distance: Safety's Distance Moved Forward b/w O-Line Set and Snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none") # + theme(aspect.ratio = 1)

Plot13 <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(-1, 5), ylim = c(0, 1)) +
  labs(x = "Maximum Pre-Snap Speed Toward Ball by a Safety (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Maximum Pre-Snap Speed Toward Ball by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Max Pre-Snap Speed Toward Ball: highest velocity, in direction of ball, at any point before snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

# Also try one incorporating the vertical speed, using Min_X_vel_TowardBall_AnySafety_AtSnap
# Really good ... similar to Plot 11 (difference in vertical velocities), but still could've used both if this was built earlier
Plot13_Alt <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  geom_vline(xintercept = 0, col = "black", lty = 2) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-2, 4), ylim = c(0, 1)) +
  labs(x = "Min Vertical Velocity by Safety at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Minimum Vertical Velocity Toward LOS at Snap by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Velocity: moving toward LOS is positive, back-pedaling is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none") +
  annotate("text", label = glue("Left of line: both safeties are \nback-pedaling at snap"),
           y = 0.4, x = -1, size = 3, color = "darkgreen") +
  annotate("text", label = glue("Right of line: at least one safety \nis moving forward at snap"),
           y = 0.6, x = 2, size = 3, color = "darkgreen") 

grid.arrange(Plot10, Plot11, ncol = 2)
# grid.arrange(Plot10, Plot11, Plot12, Plot13, ncol = 4) ... don't use, too crowded
grid.arrange(Plot10, Plot11, Plot12, Plot13, nrow = 2, ncol = 2)
grid.arrange(Plot10, Plot11, Plot12, Plot13_Alt, nrow = 2, ncol = 2)
grid.arrange(Plot10, Plot11, Plot12, nrow = 2, ncol = 2)
grid.arrange(Plot10, Plot11, Plot12, ncol = 3)
# Here's how to arrange three plots at once in an "upside-down triangle" format
(Plot10 | Plot11) / Plot12

# Here's a more complex way to do that 
# Requires adjustment to the aspect.ratio of the bottom plot, and still didn't look great with that
layout <- c(
  area(t = 1, l = 1, b = 1, r = 1), # Top-left: Plot10
  area(t = 1, l = 2, b = 1, r = 2), # Top-right: Plot11
  area(t = 2, l = 1, b = 2, r = 2)  # Bottom-center: Plot12
)

wrap_plots(Plot10, Plot11, Plot12, design = layout)

# View(top_variables_MOFO_1High)
# 1-high: Max_Y_AbsSpeed_AtSnap_AnySafety AND/OR Max_Y_SpeedTowardMOF_AtSnap_AnySafety, Max_Y_AccTowardMOF_AtSnap_AnySafety (or Max_Y_AbsAcc_AtSnap_AnySafety), Max_Y_AbsDistFromMOF_AtSnap_AnySafety (or min_SafetyAbsHorizDistToMOF_PreSnap)
Plot14 <- ggplot(data = Stats_ByFullPlay_1High) +
  # geom_point(aes(x = Max_Y_AbsSpeed_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_Y_AbsSpeed_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 1)) +
  coord_cartesian(xlim = c(0, 3), ylim = c(0, 1)) +
  labs(x = "Absolute Horizontal Speed by Safety at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Safety's Absolute Horizontal Speed at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Abs Horizontal Speed: horizontal speed where either right or left counts as positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot15 <- ggplot(data = Stats_ByFullPlay_1High) +
  # geom_point(aes(x = Max_Y_SpeedTowardMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_Y_SpeedTowardMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-5, 5, 1)) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(0, 1)) +
  labs(x = "Horizontal Speed Toward MOF by Safety at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Safety's Horizontal Speed Toward MOF at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Horizontal Speed Toward MOF: moving horizontally toward MOF is positive, toward sideline is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot16 <- ggplot(data = Stats_ByFullPlay_1High) +
  # geom_point(aes(x = Max_Y_AbsDistFromMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_Y_AbsDistFromMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 9), ylim = c(0, 1)) +
  labs(x = "Safety's Horizontal Distance from MOF at the Snap (Yards)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Safety's Horizontal Distance from MOF at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Horizontal Distance from MOF: net distance from middle of field (either right or left counts as positive)",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot17 <- ggplot(data = Stats_ByFullPlay_1High) +
  # geom_point(aes(x = Max_Y_AccTowardMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_Y_AccTowardMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(0, 1)) +
  labs(x = "Horizontal Acceleration by Safety Toward MOF at Snap (Yds/Sec^2)", y = "MOFO Coverage Rate",
       title = "MOFO Rate vs. Safety's Horizontal Acceleration Toward MOF at Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Horizontal Acc Toward MOF: accelerating toward MOF is positive, toward sideline is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

grid.arrange(Plot14, Plot15, ncol = 2)
# grid.arrange(Plot14, Plot15, Plot16, Plot17, ncol = 4) # too messy, don't use
grid.arrange(Plot14, Plot15, Plot16, Plot17, nrow = 2, ncol = 2)

# Now look into the concept of "strong telegraphs" for actual MOFO rate
# I.e., is there any feature where "when this feature happens, it's MOFO 85+ percent of the time?"
# NOTE: 1 yard/second is approximately 2.05 MPH (so 2 yards/second is a fast walk)
# View(top_variables_MOFO_AllPlays)
# View(top_variables_MOFO_2High)
# View(top_variables_MOFO_1High)

# Ideas: very low "max horiz distance from MOF by safety at the snap" (see Plot8)
mean((Stats_ByFullPlay_All9Weeks %>% filter(Max_Y_AbsDistFromMOF_AtSnap_AnySafety < 3))$PostSnap_MOF_Num)
# It's 0.1282 ... but probably better to look into a stat like that for 2-high or 1-high plays
# 2-high plays with very high or low vertical stagger (Plot10)
mean((Stats_ByFullPlay_2High %>% filter(X_Diff_BetweenSafeties_AtSnap < 1))$PostSnap_MOF_Num)
# It's 0.7924 at < 1 yard, 0.7456 at < 2 yards (could use, but vert creep distance is better)
mean((Stats_ByFullPlay_2High %>% filter(X_Diff_BetweenSafeties_AtSnap >= 7))$PostSnap_MOF_Num)
# It's 0.1462 at 6+ yards, 0.1113 at 7+ yards, 0.0919 at 8+ yards (could use)
# Definitely 2-high plays with high difference in vertical velocities at snap (Plot11)
mean((Stats_ByFullPlay_2High %>% filter(X_Vel_Diff_BetweenSafeties_AtSnap >= 4))$PostSnap_MOF_Num)
# It's 0.0870 # Use this
# 2-high plays where a safety had notable vertical creep distance (Plot12)
mean((Stats_ByFullPlay_2High %>% filter(Max_VertCreptDistance_AnySafety >= 4))$PostSnap_MOF_Num)
# It's 0.0757 # Use this
# 2-high plays with negative Max_PreSnap_X_vel_TowardBall_AnySafety (Plot13) ... if sample is decent
mean((Stats_ByFullPlay_2High %>% filter(Max_PreSnap_X_vel_TowardBall_AnySafety < 0))$PostSnap_MOF_Num)
# View(Stats_ByFullPlay_2High %>% filter(Max_PreSnap_X_vel_TowardBall_AnySafety < 0))
# It's 0.8294, and sample size is 211 plays # Usable, but probably got better stuff for 2-high plays
# 1-high plays with very low absolute horiz speed by safety at snap (Plot14) 
mean((Stats_ByFullPlay_1High %>% filter(Max_Y_AbsSpeed_AtSnap_AnySafety < 1))$PostSnap_MOF_Num)
# It's 0.1386 for < 0.5 yards/sec, 0.1393 for < 1 yards/sec
# And can try similar idea with Plot15, almost the same, can test both
mean((Stats_ByFullPlay_1High %>% filter(Max_Y_SpeedTowardMOF_AtSnap_AnySafety >= 0))$PostSnap_MOF_Num)
# It's 0.1222 ... this is better than Plot14 for the 1-high plays
# 1-high plays with very low absolute horiz distance from MOF by safety at snap (Plot16)
mean((Stats_ByFullPlay_1High %>% filter(Max_Y_AbsDistFromMOF_AtSnap_AnySafety < 3))$PostSnap_MOF_Num)
# It's 0.1033 for < 2 yards, 0.1264 for < 3 yards # Use this
# Also flip Plot16 for very high absolute horiz distance, if sample is good (like at least 8 yards)
mean((Stats_ByFullPlay_1High %>% filter(Max_Y_AbsDistFromMOF_AtSnap_AnySafety > 8))$PostSnap_MOF_Num)
# View(Stats_ByFullPlay_1High %>% filter(Max_Y_AbsDistFromMOF_AtSnap_AnySafety > 8))
# It's 0.4839, but sample is only 31 plays ... scrap it

# Repeat similar process for plots, but with model's predicted MOFO rate on Y-axis ... start with 2-high plays
# View(top_variables_PredictedMOFO_2High)
# X_Diff_BetweenSafeties_AtSnap, Max_VertCreptDistance_AnySafety (or max total crept), X_Vel_Diff_BetweenSafeties_AtSnap AND/OR Max_PreSnap_X_vel_TowardBall_AnySafety
Plot10B <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = X_Diff_BetweenSafeties_AtSnap, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 10), ylim = c(0, 1)) +
  labs(x = "Vertical Stagger b/w Safeties at Snap (Yards)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Vertical Stagger Between Safeties",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Stagger: vertical distance b/w safeties at time of snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot11B <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 6), ylim = c(0, 1)) +
  labs(x = "Difference in Vertical Velocities b/w Safeties at Snap (Yds/Sec)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Difference in Vertical Velocities b/w Safeties at Snap",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Velocities: toward LOS is negative, away from LOS is positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot12B <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = Max_VertCreptDistance_AnySafety, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_VertCreptDistance_AnySafety, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-4, 8), ylim = c(0, 1)) +
  labs(x = "Highest Vertical 'Creep' Distance by a Safety (Yards)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Highest Vertical 'Creep' Distance by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical 'Creep' Distance: Safety's Distance Moved Forward b/w O-Line Set and Snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none") # + theme(aspect.ratio = 1)

Plot13B <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(-1, 5), ylim = c(0, 1)) +
  labs(x = "Maximum Pre-Snap Speed Toward Ball by a Safety (Yds/Sec)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Maximum Pre-Snap Speed Toward Ball by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Max Pre-Snap Speed Toward Ball: highest velocity, in direction of ball, at any point before snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

# Also try one incorporating the vertical speed, using Min_X_vel_TowardBall_AnySafety_AtSnap
# Really good ... similar to Plot 11B (difference in vertical velocities), but still could've used both if this was built earlier
Plot13B_Alt <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  geom_vline(xintercept = 0, col = "black", lty = 2) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-2, 4), ylim = c(0, 1)) +
  labs(x = "Min Vertical Velocity by Safety at Snap (Yds/Sec)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Minimum Vertical Velocity Toward LOS at Snap by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Velocity: moving toward LOS is positive, back-pedaling is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none") +
  annotate("text", label = glue("Left of line: both safeties are \nback-pedaling at snap"),
           y = 0.4, x = -1, size = 3, color = "darkgreen") +
  annotate("text", label = glue("Right of line: at least one safety \nis moving forward at snap"),
           y = 0.6, x = 2, size = 3, color = "darkgreen") 

grid.arrange(Plot10B, Plot11B, ncol = 2)
# grid.arrange(Plot10B, Plot11B, Plot12B, Plot13B, ncol = 4) ... don't use, too crowded
grid.arrange(Plot10B, Plot11B, Plot12B, Plot13B, nrow = 2, ncol = 2)
grid.arrange(Plot10B, Plot11B, Plot12B, Plot13B_Alt, nrow = 2, ncol = 2)

grid.arrange(Plot10B, Plot11B, Plot12B, nrow = 2, ncol = 2)
grid.arrange(Plot10B, Plot11B, Plot12B, ncol = 3)
# Here's how to arrange three plots at once in an "upside-down triangle" format
(Plot10B | Plot11B) / Plot12B

# Here's a more complex way to do that 
# Requires adjustment to the aspect.ratio of the bottom plot, and still didn't look great with that
layout <- c(
  area(t = 1, l = 1, b = 1, r = 1), # Top-left: Plot10B
  area(t = 1, l = 2, b = 1, r = 2), # Top-right: Plot11B
  area(t = 2, l = 1, b = 2, r = 2)  # Bottom-center: Plot12B
)

wrap_plots(Plot10B, Plot11B, Plot12B, design = layout)

# Repeat similar process for 1-high plays, using predicted MOFO rate
# View(top_variables_PredictedMOFO_1High)
# Max_Y_AbsDistFromMOF_AtSnap_AnySafety AND/OR min_SafetyAbsHorizDistToMOF_PreSnap, Max_Y_SpeedTowardMOF_AtSnap_AnySafety, Max_PreSnap_X_vel_TowardBall_AnySafety
Plot14B <- ggplot(data = Stats_ByFullPlay_1High) +
  # geom_point(aes(x = Max_Y_AbsDistFromMOF_AtSnap_AnySafety, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_Y_AbsDistFromMOF_AtSnap_AnySafety, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 9), ylim = c(0, 1)) +
  labs(x = "Safety's Horizontal Distance from MOF at the Snap (Yards)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Safety's Horizontal Distance from MOF at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Horizontal Distance from MOF: net distance from middle of field (either right or left counts as positive)",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot15B <- ggplot(data = Stats_ByFullPlay_1High) +
  # geom_point(aes(x = min_SafetyAbsHorizDistToMOF_PreSnap, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = min_SafetyAbsHorizDistToMOF_PreSnap, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 1)) +
  coord_cartesian(xlim = c(0, 8), ylim = c(0, 1)) +
  labs(x = "Safety's Minimum Pre-Snap Horiz Distance from MOF (Yards)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Safety's Minimum Pre-Snap Horiz Distance from MOF",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Horizontal Distance from MOF: either right or left is positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot16B <- ggplot(data = Stats_ByFullPlay_1High) +
  # geom_point(aes(x = Max_Y_SpeedTowardMOF_AtSnap_AnySafety, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_Y_SpeedTowardMOF_AtSnap_AnySafety, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-5, 5, 1)) +
  coord_cartesian(xlim = c(-3, 3), ylim = c(0, 1)) +
  labs(x = "Horizontal Speed Toward MOF by Safety at Snap (Yds/Sec)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Safety's Horizontal Speed Toward MOF at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Horizontal Speed Toward MOF: moving horizontally toward MOF is positive, toward sideline is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

Plot17B <- ggplot(data = Stats_ByFullPlay_1High) +
  # geom_point(aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = MOFO_probability_FDA, color = "red"),
              method = "gam", method.args = list(family = "binomial"), se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(0, 1)) +
  labs(x = "Safety's Maximum Pre-Snap Vertical Velocity Toward LOS (Yds/Sec)", y = "Predicted MOFO Rate",
       title = "Predicted MOFO Rate vs. Safety's Maximum Pre-Snap Vertical Velocity Toward LOS",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Vert Velocity Toward LOS: safety moving forward is positive, backward is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "none")

grid.arrange(Plot14B, Plot15B, ncol = 2)
# grid.arrange(Plot14B, Plot15B, Plot16B, Plot17B, ncol = 4) # too messy, don't use
grid.arrange(Plot14B, Plot15B, Plot16B, Plot17B, nrow = 2, ncol = 2)

# Now look into the concept of "strong telegraphs" for predicted MOFO rate
# I.e., is there any feature where "when this feature happens, model predicts MOFO 85+ percent of the time?"
# NOTE: 1 yard/second is approximately 2.05 MPH (so 2 yards/second is a fast walk)
# View(top_variables_PredictedMOFO_AllPlays)
# View(top_variables_PredictedMOFO_2High)
# View(top_variables_PredictedMOFO_1High)

# Ideas: 2-high plays with very high or low vertical stagger (Plot10B)
mean((Stats_ByFullPlay_2High %>% filter(X_Diff_BetweenSafeties_AtSnap < 1))$MOFO_probability_FDA)
# It's 0.7475 at < 1 yard, 0.7281 at < 2 yards (use vert creep instead of this)
mean((Stats_ByFullPlay_2High %>% filter(X_Diff_BetweenSafeties_AtSnap >= 7))$MOFO_probability_FDA)
# It's 0.1332 at 6+ yards, 0.1043 at 7+ yards, 0.0886 at 8+ yards (use vert creep over this)
# Definitely 2-high plays with high difference in vertical velocities at snap (Plot11B)
mean((Stats_ByFullPlay_2High %>% filter(X_Vel_Diff_BetweenSafeties_AtSnap >= 4))$MOFO_probability_FDA)
# It's 0.0804 # Use this
# 2-high plays where a safety had notable vertical creep distance (Plot12B)
mean((Stats_ByFullPlay_2High %>% filter(Max_VertCreptDistance_AnySafety >= 4))$MOFO_probability_FDA)
# It's 0.0745 # Use this
# 2-high plays with negative Max_PreSnap_X_vel_TowardBall_AnySafety (Plot13B) ... if sample is decent
mean((Stats_ByFullPlay_2High %>% filter(Max_PreSnap_X_vel_TowardBall_AnySafety < 0))$MOFO_probability_FDA)
# View(Stats_ByFullPlay_2High %>% filter(Max_PreSnap_X_vel_TowardBall_AnySafety < 0))
# It's 0.8187, and sample size is 211 plays # Usable, but probably got better stuff for 2-high plays
# 1-high plays with very low absolute horiz distance from MOF by safety at snap (Plot14B)
mean((Stats_ByFullPlay_1High %>% filter(Max_Y_AbsDistFromMOF_AtSnap_AnySafety < 3))$MOFO_probability_FDA)
# It's 0.1158 for < 2 yards, 0.121 for < 3 yards # Use this
# Also flip Plot 14B for very high absolute horiz distance, if sample is good (like at least 8 yards)
mean((Stats_ByFullPlay_1High %>% filter(Max_Y_AbsDistFromMOF_AtSnap_AnySafety > 8))$MOFO_probability_FDA)
# View(Stats_ByFullPlay_1High %>% filter(Max_Y_AbsDistFromMOF_AtSnap_AnySafety > 8))
# It's 0.5625, but sample is only 31 plays ... scrap it
# Can repeat similar idea with Plot15B, which refers to safety's min horiz distance from MOF at any point pre-snap
mean((Stats_ByFullPlay_1High %>% filter(min_SafetyAbsHorizDistToMOF_PreSnap < 2))$MOFO_probability_FDA)
# It's 0.1286 for < 2 yards, 0.1328 for < 3 yards, but 14B is probably better
# Look into the safety having a positive horiz speed toward MOF at the snap, with Plot16B
mean((Stats_ByFullPlay_1High %>% filter(Max_Y_SpeedTowardMOF_AtSnap_AnySafety >= 0))$MOFO_probability_FDA)
# It's 0.1427 ... definitely usable for the 1-high plays
# And look into plays where safety never had a positive vertical velocity before the snap (Plot17B)
mean((Stats_ByFullPlay_1High %>% filter(Max_PreSnap_X_vel_TowardBall_AnySafety < 0))$MOFO_probability_FDA)
# It's 0.1328

# Then incorporate a "multiple response variable" concept with actual AND predicted MOFO rates on Y-axis
Plot10C <- ggplot(data = Stats_ByFullPlay_2High) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = MOFO_probability_FDA, color = "Predicted MOFO Rate"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "Actual MOFO Rate"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 10), ylim = c(0, 1)) +
  labs(x = "Vertical Stagger b/w Safeties at Snap (Yards)", y = "MOFO Coverage Rate",
       title = "Predicted and Actual MOFO Rate vs. Vertical Stagger b/w Safeties",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Stagger: vertical distance b/w safeties at time of snap",
       color = "Predicted vs. Actual") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "right")

Plot11C <- ggplot(data = Stats_ByFullPlay_2High) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = MOFO_probability_FDA, color = "Predicted MOFO Rate"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "Actual MOFO Rate"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 8), ylim = c(0, 1)) +
  labs(x = "Difference in Vertical Velocities b/w Safeties at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "Predicted & Actual MOFO Rate vs. Diff in Vert Velocities b/w Safeties at Snap",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Velocities: toward LOS is negative, away from LOS is positive",
       color = "Predicted vs. Actual") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "right")

Plot12C <- ggplot(data = Stats_ByFullPlay_2High) +
  stat_smooth(mapping = aes(x = Max_VertCreptDistance_AnySafety, y = MOFO_probability_FDA, color = "Predicted MOFO Rate"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = Max_VertCreptDistance_AnySafety, y = PostSnap_MOF_Num, color = "Actual MOFO Rate"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-4, 8), ylim = c(0, 1)) +
  labs(x = "Highest Vertical 'Creep' Distance by a Safety (Yards)", y = "MOFO Coverage Rate",
       title = "Predicted & Actual MOFO Rate vs. Highest Vert 'Creep' Distance by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical 'Creep' Distance: Safety's Distance Moved Forward b/w O-Line Set and Snap",
       color = "Predicted vs. Actual") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "right") # + theme(aspect.ratio = 1)

Plot13C <- ggplot(data = Stats_ByFullPlay_2High) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = MOFO_probability_FDA, color = "Predicted MOFO Rate"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = PostSnap_MOF_Num, color = "Actual MOFO Rate"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-1, 5), ylim = c(0, 1)) +
  labs(x = "Maximum Pre-Snap Speed Toward Ball by a Safety (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "Predicted & Actual MOFO Rate vs. Max Pre-Snap Speed Toward Ball by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Max Pre-Snap Speed Toward Ball: highest velocity, in direction of ball, at any point before snap",
       color = "Predicted vs. Actual") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "right")

# Also try one incorporating the vertical speed, using Min_X_vel_TowardBall_AnySafety_AtSnap
# Really good ... similar to Plot 11C (difference in vertical velocities), but still could've used both if this was built earlier
Plot13C_Alt <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = MOFO_probability_FDA, color = "Predicted MOFO Rate"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = PostSnap_MOF_Num, color = "Actual MOFO Rate"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  geom_vline(xintercept = 0, col = "black", lty = 2) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-2, 4), ylim = c(0, 1)) +
  labs(x = "Min Vertical Velocity by Safety at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "Predicted & Actual MOFO Rate vs. Minimum Vertical Velocity Toward LOS at Snap by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Velocity: moving toward LOS is positive, back-pedaling is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 16),
        axis.title.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 15),
        panel.spacing = unit(2, "lines"),
        legend.position = "right") +
  annotate("text", label = glue("Left of line: both safeties are \nback-pedaling at snap"),
           y = 0.4, x = -1, size = 3, color = "darkgreen") +
  annotate("text", label = glue("Right of line: at least one safety \nis moving forward at snap"),
           y = 0.6, x = 2, size = 3, color = "darkgreen") 

grid.arrange(Plot10C, Plot11C, ncol = 2)
# grid.arrange(Plot10C, Plot11C, Plot12C, Plot13C, ncol = 4) ... don't use, too crowded
grid.arrange(Plot10C, Plot11C, Plot12C, Plot13C, nrow = 2, ncol = 2)
grid.arrange(Plot10C, Plot11C, Plot12C, Plot13C_Alt, nrow = 2, ncol = 2)

grid.arrange(Plot10C, Plot11C, Plot12C, nrow = 2, ncol = 2)
grid.arrange(Plot10C, Plot11C, Plot12C, ncol = 3)
# Here's how to arrange three plots at once in an "upside-down triangle" format
(Plot10C | Plot11C) / Plot12C

# Here's a more complex way to do that 
# Requires adjustment to the aspect.ratio of the bottom plot, and still didn't look great with that
layout <- c(
  area(t = 1, l = 1, b = 1, r = 1), # Top-left: Plot10C
  area(t = 1, l = 2, b = 1, r = 2), # Top-right: Plot11C
  area(t = 2, l = 1, b = 2, r = 2)  # Bottom-center: Plot12C
)

wrap_plots(Plot10C, Plot11C, Plot12C, design = layout)

# Also make modified versions of these plots with Ryan's data visualization ideas (leading to three-column plot)
Plot10D <- ggplot(data = Stats_ByFullPlay_2High) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = MOFO_probability_FDA, color = "Estimated \nMOFO \nProbability\n"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "Observed \nMOFO \nRate\n"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 10), ylim = c(0, 1)) +
  labs(x = "Vertical Stagger b/w Safeties at Snap (Yards)", y = "MOFO Probability",
       title = " ",
       subtitle = " ",
       caption = "Vertical Stagger: vert distance b/w safeties at time of snap",
       color = "Predicted vs. Actual") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 18),
        axis.title.x = element_text(size = 14),
        axis.text.y = element_text(size = 14),
        axis.text.x = element_text(size = 14),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 0),
        panel.spacing = unit(2, "lines"),
        legend.position = "none") 

Plot11D <- ggplot(data = Stats_ByFullPlay_2High) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = MOFO_probability_FDA, color = "Estimated \nMOFO \nProbability\n"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "Observed \nMOFO \nRate\n"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 8), ylim = c(0, 1)) +
  labs(x = "Difference in Vert Velocities b/w Safeties at Snap (Yds/Sec)", y = "MOFO Probability",
       title = "How Estimated and Observed MOFO Rate Depend on Key Features",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vert Velocities: toward LOS is negative, away from LOS is positive",
       color = "Predicted vs. Actual") +
  theme_bw() + 
  theme(plot.title = element_text(size = 20, hjust = 0.5),
        plot.subtitle = element_text(size = 15, hjust = 0.5),
        axis.title.y = element_text(size = 18),
        axis.title.x = element_text(size = 14),
        axis.text.y = element_text(size = 14),
        axis.text.x = element_text(size = 14),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 0),
        panel.spacing = unit(2, "lines"),
        legend.position = "none") 

Plot12D <- ggplot(data = Stats_ByFullPlay_2High) +
  stat_smooth(mapping = aes(x = Max_VertCreptDistance_AnySafety, y = MOFO_probability_FDA, color = "Estimated \nMOFO \nProbability\n"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = Max_VertCreptDistance_AnySafety, y = PostSnap_MOF_Num, color = "Observed \nMOFO \nRate\n"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-4, 8), ylim = c(0, 1)) +
  labs(x = "Highest Vertical 'Creep' Distance by Safety (Yards)", y = "MOFO Probability",
       title = " ",
       subtitle = " ",
       caption = "'Creep' Distance: safety's distance moved forward b/w OL Set and Snap",
       color = "Predicted vs. Actual") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 18),
        axis.title.x = element_text(size = 14),
        axis.text.y = element_text(size = 14),
        axis.text.x = element_text(size = 14),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 0),
        panel.spacing = unit(2, "lines"),
        legend.position = "right") # + theme(aspect.ratio = 1)

Plot13D <- ggplot(data = Stats_ByFullPlay_2High) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = MOFO_probability_FDA, color = "Estimated \nMOFO \nProbability\n"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = PostSnap_MOF_Num, color = "Observed \nMOFO \nRate\n"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-1, 5), ylim = c(0, 1)) +
  labs(x = "Maximum Pre-Snap Speed Toward Ball by a Safety (Yds/Sec)", y = "MOFO Probability",
       title = "Estimated and Observed MOFO Rate vs. Max Pre-Snap Speed Toward Ball by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Max Pre-Snap Speed Toward Ball: highest velocity, in direction of ball, at any point before snap",
       color = "Predicted vs. Actual") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 18),
        axis.title.x = element_text(size = 14),
        axis.text.y = element_text(size = 14),
        axis.text.x = element_text(size = 14),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 0),
        panel.spacing = unit(2, "lines"),
        legend.position = "right")

# Also try one incorporating the vertical speed, using Min_X_vel_TowardBall_AnySafety_AtSnap
# Really good ... similar to Plot 11D (difference in vertical velocities), but still could've used both if this was built earlier
Plot13D_Alt <- ggplot(data = Stats_ByFullPlay_2High) +
  # geom_point(aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = MOFO_probability_FDA), alpha = 0.05) +
  stat_smooth(mapping = aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = MOFO_probability_FDA, color = "Estimated \nMOFO \nProbability\n"),
              method = "gam", se = F, span = 0.75) +
  stat_smooth(mapping = aes(x = Min_X_vel_TowardBall_AnySafety_AtSnap, y = PostSnap_MOF_Num, color = "Observed \nMOFO \nRate\n"),
              method = "gam", method.args = list(family = "binomial"), se = F, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  geom_vline(xintercept = 0, col = "black", lty = 2) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-4, 10, 2)) +
  coord_cartesian(xlim = c(-2, 4), ylim = c(0, 1)) +
  labs(x = "Min Vertical Velocity by Safety at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = " ",
       subtitle = " ",
       caption = "Vertical Velocity: moving toward LOS is positive, back-pedaling is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        axis.title.y = element_text(size = 18),
        axis.title.x = element_text(size = 14),
        axis.text.y = element_text(size = 14),
        axis.text.x = element_text(size = 14),
        plot.caption = element_text(size = 12),
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 0),
        panel.spacing = unit(2, "lines"),
        legend.position = "right") +
  annotate("text", label = glue("Left of line: both safeties are \nback-pedaling at snap"),
           y = 0.4, x = -1, size = 3, color = "darkgreen") +
  annotate("text", label = glue("Right of line: at least one safety \nis moving forward at snap"),
           y = 0.6, x = 2, size = 3, color = "darkgreen") 

grid.arrange(Plot10D, Plot11D, ncol = 2)
# grid.arrange(Plot10D, Plot11D, Plot12D, Plot13D, ncol = 4) ... don't use, too crowded
grid.arrange(Plot10D, Plot11D, Plot12D, Plot13D, nrow = 2, ncol = 2)
grid.arrange(Plot10D, Plot11D, Plot12D, Plot13D_Alt, nrow = 2, ncol = 2)
grid.arrange(Plot10D, Plot11D, Plot12D, ncol = 3)

# Here's how to still include the legend only once, but not distort that specific plot (Plot12D in this case)
# Helps us get three plots together conveniently
final_plot <- (Plot10D + theme(legend.position = "none")) +
  (Plot11D + theme(legend.position = "none")) +
  Plot12D +
  plot_layout(ncol = 3, guides = "collect") &
  theme(legend.position = "right")

# Display the final plot
print(final_plot)

# Alternate version of that format which includes four plots
final_plot_2 <- (Plot10D + theme(legend.position = "none")) +
  (Plot11D + theme(legend.position = "none")) +
  (Plot12D + theme(legend.position = "none")) +
  Plot13D_Alt +
  plot_layout(ncol = 4, guides = "collect") &
  theme(legend.position = "right")

# Display the final plot
print(final_plot_2)

# And, make a gt table (either 2-high, or all plays) ranking features by how correlated they are with PostSnap_MOF_Num
# First, gotta sort in descending order, starting with all plays ... but make it in descending order of ABSOLUTE correlation
# If we wanted all possible features instead of just the top few, use corr_df_MOFO_AllPlays instead of top_variables
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% arrange(desc(abs(PostSnap_MOF_Num)))

# Select only the column with the correlations we care about
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% select(PostSnap_MOF_Num)

# Now get rid of the PostSnap_MOF_Num row
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays[-1, , drop = FALSE] # the drop argument ensure that it remains a data frame

# And now create a new column called "Feature" that corresponds with the current row names (i.e., the features)
Rows_top_variables_MOFO_AllPlays <- rownames(top_variables_MOFO_AllPlays)
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% mutate(Feature = Rows_top_variables_MOFO_AllPlays)

# Now manually rename the cells to make them make more sense
top_variables_MOFO_AllPlays$Feature
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% 
  mutate(Feature = ifelse(Feature %in% "X_Diff_BetweenSafeties_AtSnap", "Vertical Stagger Between Safeties at the Snap", Feature))
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% 
  mutate(Feature = ifelse(Feature %in% "X_Vel_Diff_BetweenSafeties_AtSnap", "Difference in Vertical Velocities Between Safeties at the Snap", Feature))
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_AbsDistFromMOF_AtSnap_AnySafety", "Max Horizontal Distance From MOF at the Snap By a Safety", Feature))
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% 
  mutate(Feature = ifelse(Feature %in% "min_SafetyAbsHorizDistToMOF_PreSnap", "Minimum Pre-Snap Horizontal Distance from MOF By a Safety", Feature))
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% 
  mutate(Feature = ifelse(Feature %in% "X_Acc_Diff_BetweenSafeties_AtSnap", "Difference in Vertical Accelerations Between Safeties at the Snap", Feature))

# Re-arrange column order so the actual correlation is on the far-right
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% select(2, 1)

# Perhaps add an extra "explanation" column??
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays %>% 
  mutate(Explanation = c("Larger Vertical Stagger --> MOFC more likely", "Safeties Moving in Different Vertical Directions --> MOFC more likely",
                         "Safety Far From Middle of Field at the Snap --> MOFO more likely", "Safety Very Close to MOF Before the Snap --> MOFC more likely", 
                         "Safeties Accelerating in Different Vertical Directions --> MOFC more likely"))

class(top_variables_MOFO_AllPlays) <- "data.frame"
MOFO_Features_AllPlays_FancyTable <- top_variables_MOFO_AllPlays %>%
  select(c("Feature", "PostSnap_MOF_Num", "Explanation")) %>%
  head(20) %>% # this is how we limit to the top 20 if necessary
  mutate(Rank = row_number(desc(abs(PostSnap_MOF_Num)))) %>%
  relocate("Rank")

MOFO_Features_AllPlays_FancyTable <- MOFO_Features_AllPlays_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:2, "Feature", "PostSnap_MOF_Num", "Explanation) |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(PostSnap_MOF_Num),
    decimals = 2,
  ) |>
  data_color(
    columns = c(PostSnap_MOF_Num),
    colors = scales::col_numeric(
      palette = c("darkgreen", "green"),
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    Feature = md("**Feature**"),
    PostSnap_MOF_Num = html('<span style="text-decoration:overline; font-weight:bold">Correlation with MOFO Rate</span>'),
    Explanation = md("**Explanation**")
  ) |> 
  cols_align(
    align = "center",
    columns = Feature:Explanation
  ) |> 
  tab_header(md("**Top Safety Features that Correlate with Actual MOFO Coverage Rate**"),
             md("Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Negative correlation means a higher value in that feature results in LOWER likelihood of MOFO",
    locations = cells_column_labels(
      columns = PostSnap_MOF_Num
    )
  )

gtsave(MOFO_Features_AllPlays_FancyTable, "MOFO_Features_AllPlays_FancyTable.png")

# Repeat all of that gt table code for only 2-high plays
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% arrange(desc(abs(PostSnap_MOF_Num)))

# Select only the column with the correlations we care about
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% select(PostSnap_MOF_Num)

# Now get rid of the PostSnap_MOF_Num row
top_variables_MOFO_2High <- top_variables_MOFO_2High[-1, , drop = FALSE] # the drop argument ensure that it remains a data frame

# And now create a new column called "Feature" that corresponds with the current row names (i.e., the features)
Rows_top_variables_MOFO_2High <- rownames(top_variables_MOFO_2High)
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% mutate(Feature = Rows_top_variables_MOFO_2High)

# Now manually rename the cells to make them make more sense
top_variables_MOFO_2High$Feature
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "X_Diff_BetweenSafeties_AtSnap", "Vertical Stagger Between Safeties at the Snap", Feature))
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_VertCreptDistance_AnySafety", "Max Vertical Creep Distance Foward By a Safety", Feature))
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_PreSnap_X_vel_TowardBall_AnySafety", "Max Pre-Snap Vertical Velocity Toward LOS By a Safety", Feature))
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "X_Vel_Diff_BetweenSafeties_AtSnap", "Difference in Vertical Velocities Between Safeties at the Snap", Feature))
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_TotalCreptDistance_ToBall_AnySafety", "Max Total Creep Distance Toward Ball By a Safety", Feature))
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_PreSnap_X_acc_TowardBall_AnySafety", "Max Pre-Snap Vertical Acceleration Toward LOS By a Safety", Feature))
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "X_Acc_Diff_BetweenSafeties_AtSnap", "Difference in Vertical Accelerations Between Safeties at the Snap", Feature))
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max Horizontal Speed Toward MOF By a Safety at the Snap", Feature))

# Re-arrange column order so the actual correlation is on the far-right
top_variables_MOFO_2High <- top_variables_MOFO_2High %>% select(2, 1)

# Perhaps add an extra "explanation" column??
# top_variables_MOFO_2High <- top_variables_MOFO_2High %>% 
#   mutate(Explanation = c("Larger Vertical Stagger --> MOFC more likely", "Safety Crept Far Forward Vertically --> MOFC more likely", 
#                          "Safety Moving Fast Toward LOS --> MOFC more likely", "Safeties Moving in Different Directions --> MOFC more likely", 
#                          "Safety Crept Far Toward Ball --> MOFC more likely", "Safety Accelerating Toward LOS --> MOFC more likely",
#                          "Safeties Accelerating in Different Directions --> MOFC more likely", "Safety Moving Toward MOF --> MOFC more likely"))

class(top_variables_MOFO_2High) <- "data.frame"
MOFO_Features_2High_FancyTable <- top_variables_MOFO_2High %>%
  select(c("Feature", "PostSnap_MOF_Num")) %>%
  head(6) %>% # this is how we limit to the top 6
  mutate(Rank = row_number(desc(abs(PostSnap_MOF_Num)))) %>%
  relocate("Rank")

MOFO_Features_2High_FancyTable <- MOFO_Features_2High_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:2, "Feature", "PostSnap_MOF_Num", "Explanation") |> 
  head(6) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(PostSnap_MOF_Num),
    decimals = 2,
  ) |>
  data_color(
    columns = c(PostSnap_MOF_Num),
    colors = scales::col_numeric(
      palette = c("darkgreen", "green"),
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    Feature = md("**Feature**"),
    PostSnap_MOF_Num = html('<span style="text-decoration:overline; font-weight:bold">Correlation with MOFO Rate</span>'),
    # Explanation = md("**Explanation**")
  ) |> 
  cols_align(
    align = "center",
    columns = Feature:PostSnap_MOF_Num
  ) |> 
  tab_header(md("**Top Safety Features that Correlate with Actual MOFO Coverage Rate**"),
             md("Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Negative correlation means a higher value in that feature results in LOWER likelihood of MOFO",
    locations = cells_column_labels(
      columns = PostSnap_MOF_Num
    )
  )

gtsave(MOFO_Features_2High_FancyTable, "MOFO_Features_2High_FancyTable.png")

# Repeat all of that gt table code for 1-high plays
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% arrange(desc(abs(PostSnap_MOF_Num)))

# Select only the column with the correlations we care about
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% select(PostSnap_MOF_Num)

# Now get rid of the PostSnap_MOF_Num row
top_variables_MOFO_1High <- top_variables_MOFO_1High[-1, , drop = FALSE] # the drop argument ensure that it remains a data frame

# And now create a new column called "Feature" that corresponds with the current row names (i.e., the features)
Rows_top_variables_MOFO_1High <- rownames(top_variables_MOFO_1High)
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% mutate(Feature = Rows_top_variables_MOFO_1High)

# Now manually rename the cells to make them make more sense
top_variables_MOFO_1High$Feature
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_AbsDistFromMOF_AtSnap_AnySafety", "Safety's Horizontal Distance From MOF at the Snap", Feature))
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% 
  mutate(Feature = ifelse(Feature %in% "min_SafetyAbsHorizDistToMOF_PreSnap", "Safety's Minimum Pre-Snap Horizontal Distance from MOF", Feature))
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Safety's Horizontal Speed Toward MOF at the Snap", Feature))
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_AccTowardMOF_AtSnap_AnySafety", "Safety's Horizontal Acc Toward MOF at the Snap", Feature))
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_AbsSpeed_AtSnap_AnySafety", "Safety's Absolute Horizontal Speed at the Snap", Feature))
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_AbsAcc_AtSnap_AnySafety", "Safety's Absolute Horizontal Acceleration at the Snap", Feature))
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_VertCreptDistance_AnySafety", "Safety's Vertical Creep Distance Toward LOS", Feature))

# Re-arrange column order so the actual correlation is on the far-right
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% select(2, 1)

# Perhaps add an extra "explanation" column??
top_variables_MOFO_1High <- top_variables_MOFO_1High %>% 
  mutate(Explanation = c("Safety Being Far from MOF at the Snap --> MOFO more likely", "Safety Being Near MOF Before the Snap --> MOFC more likely",
                         "Safety Moving Toward Middle of Field --> MOFC more likely", "Safety Accelerating Horizontally Toward MOF --> MOFC more likely", 
                         "Safety Moving Fast Horizontally --> MOFO more likely", "Safety Accelerating at the Snap --> MOFO more likely",
                         "Safety Creeping Forward Before Snap --> MOFO more likely"))

class(top_variables_MOFO_1High) <- "data.frame"
MOFO_Features_1High_FancyTable <- top_variables_MOFO_1High %>%
  select(c("Feature", "PostSnap_MOF_Num", "Explanation")) %>%
  head(20) %>% # this is how we limit to the top 20 if necessary
  mutate(Rank = row_number(desc(abs(PostSnap_MOF_Num)))) %>%
  relocate("Rank")

MOFO_Features_1High_FancyTable <- MOFO_Features_1High_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:2, "Feature", "PostSnap_MOF_Num", "Explanation) |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(PostSnap_MOF_Num),
    decimals = 2,
  ) |>
  data_color(
    columns = c(PostSnap_MOF_Num),
    colors = scales::col_numeric(
      palette = c("red", "darkred"),
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    Feature = md("**Feature**"),
    PostSnap_MOF_Num = html('<span style="text-decoration:overline; font-weight:bold">Correlation with MOFO Rate</span>'),
    Explanation = md("**Explanation**")
  ) |> 
  cols_align(
    align = "center",
    columns = Feature:Explanation
  ) |> 
  tab_header(md("**Top Safety Features that Correlate with Actual MOFO Coverage Rate**"),
             md("Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Negative correlation means a higher value in that feature results in LOWER likelihood of MOFO",
    locations = cells_column_labels(
      columns = PostSnap_MOF_Num
    )
  )

gtsave(MOFO_Features_1High_FancyTable, "MOFO_Features_1High_FancyTable.png")

# Now make a version of the 2-high table that includes correlation with predicted MOFO rates
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% arrange(desc(abs(MOFO_probability_FDA)))

# Select only the column with the correlations we care about
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% select(MOFO_probability_FDA)

# Now get rid of the MOFO_probability_FDA row
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High[-1, , drop = FALSE] # the drop argument ensure that it remains a data frame

# And now create a new column called "Feature" that corresponds with the current row names (i.e., the features)
Rows_top_variables_PredictedMOFO_2High <- rownames(top_variables_PredictedMOFO_2High)
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% mutate(Feature = Rows_top_variables_PredictedMOFO_2High)

# Now manually rename the cells to make them make more sense
top_variables_PredictedMOFO_2High$Feature
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "X_Diff_BetweenSafeties_AtSnap", "Vertical Stagger Between Safeties at the Snap", Feature))
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_VertCreptDistance_AnySafety", "Max Vertical Creep Distance Foward By a Safety", Feature))
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_PreSnap_X_vel_TowardBall_AnySafety", "Max Pre-Snap Vertical Velocity Toward LOS By a Safety", Feature))
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_TotalCreptDistance_ToBall_AnySafety", "Max Total Creep Distance Toward Ball By a Safety", Feature))
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "X_Vel_Diff_BetweenSafeties_AtSnap", "Difference in Vertical Velocities Between Safeties at the Snap", Feature))
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_PreSnap_X_acc_TowardBall_AnySafety", "Max Pre-Snap Vertical Acceleration Toward LOS By a Safety", Feature))
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "min_SafetyAbsHorizDistToMOF_PreSnap", "Minimum Pre-Snap Horiz Distance to MOF by a Safety", Feature))
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max Horizontal Speed Toward MOF By a Safety at the Snap", Feature))

# Re-arrange column order so the actual correlation is on the far-right
top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% select(2, 1)

# Perhaps add an extra "explanation" column??
# top_variables_PredictedMOFO_2High <- top_variables_PredictedMOFO_2High %>% 
#   mutate(Explanation = c("Larger Vertical Stagger --> MOFC more likely", "Safety Crept Far Forward Vertically --> MOFC more likely", 
#                          "Safety Moving Fast Toward LOS --> MOFC more likely", "Safety Crept Far Toward Ball --> MOFC more likely",
#                           "Safeties Moving in Different Directions --> MOFC more likely",  "Safety Accelerating Toward LOS --> MOFC more likely",
#                          "Safety Close to MOF Before Snap --> MOFC more likely", "Safety Moving Toward MOF --> MOFC more likely"))

class(top_variables_PredictedMOFO_2High) <- "data.frame"
PredictedMOFO_Features_2High_FancyTable <- top_variables_PredictedMOFO_2High %>%
  select(c("Feature", "MOFO_probability_FDA")) %>%
  head(6) %>% # this is how we limit to the top 6
  mutate(Rank = row_number(desc(abs(MOFO_probability_FDA)))) %>%
  relocate("Rank")

PredictedMOFO_Features_2High_FancyTable <- PredictedMOFO_Features_2High_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:2, "Feature", "MOFO_probability_FDA", "Explanation") |> 
  head(6) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(MOFO_probability_FDA),
    decimals = 2,
  ) |>
  data_color(
    columns = c(MOFO_probability_FDA),
    colors = scales::col_numeric(
      palette = c("darkgreen", "green"),
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    Feature = md("**Feature**"),
    MOFO_probability_FDA = html('<span style="text-decoration:overline; font-weight:bold">Correlation w/ Estimated MOFO Probability</span>'),
    # Explanation = md("**Explanation**")
  ) |> 
  cols_align(
    align = "center",
    columns = Feature:MOFO_probability_FDA
  ) |> 
  tab_header(md("**Top Safety Features that Correlate with Model's Predicted MOFO Rate**"),
             md("Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Negative correlation means a higher value in that feature results in LOWER likelihood of MOFO",
    locations = cells_column_labels(
      columns = MOFO_probability_FDA
    )
  )

gtsave(PredictedMOFO_Features_2High_FancyTable, "PredictedMOFO_Features_2High_FancyTable.png")

# Now make a version of the 2-high table that includes correlations with predicted AND actual MOFO rates
PredAndActual_MOFO_Features_2High <- Stats_ByFullPlay_2High %>%
  select(c("MOFO_probability_FDA", "PostSnap_MOF_Num", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Min_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety",
           "Min_Y_AccTowardMOF_AtSnap_AnySafety", "Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap", "Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap"))

corr_matrix_PredAndActual_MOFO_2High <- PredAndActual_MOFO_Features_2High %>%
  select(where(is.numeric)) %>%  
  cor(use = "pairwise.complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with MOFO_probability_FDA
corr_df_PredAndActual_MOFO_2High <- as.data.frame(corr_matrix_PredAndActual_MOFO_2High)
# View(corr_df_PredAndActual_MOFO_2High %>% arrange(desc(MOFO_probability_FDA)))
rm(corr_matrix_PredAndActual_MOFO_2High)

# Now take all variables with at least a correlation of 0.35 in either direction
top_variables_PredAndActual_MOFO_2High <- corr_df_PredAndActual_MOFO_2High %>% filter(abs(MOFO_probability_FDA) >= 0.35)
rownames(top_variables_PredAndActual_MOFO_2High) # keep in mind MOFO_probability_FDA obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High[, colnames(top_variables_PredAndActual_MOFO_2High) %in% rownames(top_variables_PredAndActual_MOFO_2High)]

# Arrange in descending order of MOFO_probability_FDA, but stil using absolute value
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% arrange(desc(abs(MOFO_probability_FDA)))

# Select only the columns with the correlations we care about (NOW that means two columns)
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% select(MOFO_probability_FDA, PostSnap_MOF_Num)

# Now get rid of the MOFO_probability_FDA and PostSnap_MOF_Num rows
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High[-(1:2), , drop = FALSE] # the drop argument ensure that it remains a data frame

# And now create a new column called "Feature" that corresponds with the current row names (i.e., the features)
Rows_top_variables_PredAndActual_MOFO_2High <- rownames(top_variables_PredAndActual_MOFO_2High)
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% mutate(Feature = Rows_top_variables_PredAndActual_MOFO_2High)

# Now manually rename the cells to make them make more sense
top_variables_PredAndActual_MOFO_2High$Feature
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "X_Diff_BetweenSafeties_AtSnap", "Vertical Stagger Between Safeties at the Snap", Feature))
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_VertCreptDistance_AnySafety", "Max Vertical Creep Distance Foward By a Safety", Feature))
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_PreSnap_X_vel_TowardBall_AnySafety", "Max Pre-Snap Vertical Velocity Toward LOS By a Safety", Feature))
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_TotalCreptDistance_ToBall_AnySafety", "Max Total Creep Distance Toward Ball By a Safety", Feature))
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "X_Vel_Diff_BetweenSafeties_AtSnap", "Difference in Vertical Velocities Between Safeties at the Snap", Feature))
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_PreSnap_X_acc_TowardBall_AnySafety", "Max Pre-Snap Vertical Acceleration Toward LOS By a Safety", Feature))
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "min_SafetyAbsHorizDistToMOF_PreSnap", "Minimum Pre-Snap Horiz Distance to MOF by a Safety", Feature))
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
  mutate(Feature = ifelse(Feature %in% "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max Horizontal Speed Toward MOF By a Safety at the Snap", Feature))

# Re-arrange column order so the "Feature" goes on far left, and correlation with MOFO_probability_FDA is on far right
top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% select(3, 2, 1)

# Perhaps add an extra "explanation" column??
# top_variables_PredAndActual_MOFO_2High <- top_variables_PredAndActual_MOFO_2High %>% 
#   mutate(Explanation = c("Larger Vertical Stagger --> MOFC more likely", "Safety Crept Far Forward Vertically --> MOFC more likely", 
#                          "Safety Moving Fast Toward LOS --> MOFC more likely", "Safety Crept Far Toward Ball --> MOFC more likely",
#                           "Safeties Moving in Different Directions --> MOFC more likely",  "Safety Accelerating Toward LOS --> MOFC more likely",
#                          "Safety Close to MOF Before Snap --> MOFC more likely", "Safety Moving Toward MOF --> MOFC more likely"))

class(top_variables_PredAndActual_MOFO_2High) <- "data.frame"
PredAndActual_MOFO_Features_2High_FancyTable <- top_variables_PredAndActual_MOFO_2High %>%
  select(c("Feature", "PostSnap_MOF_Num", "MOFO_probability_FDA")) %>%
  head(6) %>% # this is how we limit to the top 6
  mutate(Rank = row_number(desc(abs(MOFO_probability_FDA)))) %>%
  relocate("Rank")

PredAndActual_MOFO_Features_2High_FancyTable <- PredAndActual_MOFO_Features_2High_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:2, "Feature", "PostSnap_MOF_Num", "MOFO_probability_FDA") |> 
  head(6) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(PostSnap_MOF_Num),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(MOFO_probability_FDA),
    decimals = 2,
  ) |>
  data_color(
    columns = c(PostSnap_MOF_Num),
    colors = scales::col_numeric(
      palette = c("darkgreen", "green"),
      domain = NULL
    )
  ) |> data_color(
    columns = c(MOFO_probability_FDA),
    colors = scales::col_numeric(
      palette = c("darkgreen", "green"),
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    Feature = md("**Feature**"),
    PostSnap_MOF_Num = md("**Correlation w/ Observed MOFO Rate**"),
    MOFO_probability_FDA = html('<span style="text-decoration:overline; font-weight:bold">Correlation w/ Estimated MOFO Probability</span>'),
    # Explanation = md("**Explanation**")
  ) |> 
  cols_align(
    align = "center",
    columns = Feature:MOFO_probability_FDA
  ) |> 
  tab_header(md("**Safety Features that Correlate with Observed and Estimated MOFO Rate**"),
             md("Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Negative correlation means a higher value in that feature results in LOWER likelihood of MOFO",
    locations = cells_column_labels(
      columns = MOFO_probability_FDA
    )
  )

gtsave(PredAndActual_MOFO_Features_2High_FancyTable, "PredAndActual_MOFO_Features_2High_FancyTable.png")

# If needed, here's how to export to a CSV
write.csv(Stats_ByFullPlay_Final, "Stats_ByFullPlay_Final.csv")
write.csv(Stats_ByFullPlay_All9Weeks, "Stats_ByFullPlay_All9Weeks.csv")
write.csv(Stats_ByFullPlay_2High, "Stats_ByFullPlay_2High.csv")
write.csv(Stats_ByFullPlay_1High, "Stats_ByFullPlay_1High.csv")
