library(tidyverse)

# Stats_ByFullPlay_Final was defined in the "Aggregating Frames to Plays" GitHib file

# Read in data if necessary: 
Stats_ByFullPlay_Final <- fread("Stats_ByFullPlay_Final.csv")

colnames(Stats_ByFullPlay_Final) # recall that Snap_Entropy is the continuous play-level one (HighEntropy is binary)
# Before we make these matrices, adjust Min_PreSnap_X_vel_component_AnySafety and Min_PreSnap_X_acc_component_AnySafety
# This is to get rid of the "double negative" idea ... in other words, make a high velocity toward the ball show up as a positive number
Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>% 
  mutate(Max_PreSnap_X_vel_TowardBall_AnySafety = -1 * Min_PreSnap_X_vel_component_AnySafety)
Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>% 
  mutate(Max_PreSnap_X_acc_TowardBall_AnySafety = -1 * Min_PreSnap_X_acc_component_AnySafety)
Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>% select(-c("Min_PreSnap_X_vel_component_AnySafety", "Min_PreSnap_X_acc_component_AnySafety"))

MOFO_Features_AllPlays <- Stats_ByFullPlay_Final %>%
  select(c("PostSnap_MOF_Num", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety",
           "Max_Y_SpeedTowardMOF_AtSnap_AnySafety", "Min_Y_SpeedTowardMOF_AtSnap_AnySafety", "Max_Y_AccTowardMOF_AtSnap_AnySafety",
           "Min_Y_AccTowardMOF_AtSnap_AnySafety", "Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap", "Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap"))

corr_matrix_MOFO_AllPlays <- MOFO_Features_AllPlays %>%
  select(where(is.numeric)) %>%  
  cor(use = "complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with PostSnap_MOF_Num
corr_df_MOFO_AllPlays <- as.data.frame(corr_matrix_MOFO_AllPlays)
corr_df_MOFO_AllPlays <- corr_df_MOFO_AllPlays %>% select(-"gameId")
corr_df_MOFO_AllPlays <- corr_df_MOFO_AllPlays[-1, ] # this gets rid of gameId row
# View(corr_df_MOFO_AllPlays %>% arrange(desc(PostSnap_MOF_Num)))
rm(corr_matrix_MOFO_AllPlays)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_MOFO_AllPlays <- corr_df_MOFO_AllPlays %>% filter(abs(PostSnap_MOF_Num) >= 0.25)
rownames(top_variables_MOFO_AllPlays) # keep in mind PostSnap_MOF_Num obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_MOFO_AllPlays <- top_variables_MOFO_AllPlays[, colnames(top_variables_MOFO_AllPlays) %in% rownames(top_variables_MOFO_AllPlays)]

MOFO_Features_2High <- Stats_ByFullPlay_Final %>% filter(num_safeties_pre_snap == 2) %>%
  select(c("PostSnap_MOF_Num", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety"))

corr_matrix_MOFO_2High <- MOFO_Features_2High %>%
  select(where(is.numeric)) %>%  
  cor(use = "complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with PostSnap_MOF_Num
corr_df_MOFO_2High <- as.data.frame(corr_matrix_MOFO_2High)
corr_df_MOFO_2High <- corr_df_MOFO_2High %>% select(-"gameId")
corr_df_MOFO_2High <- corr_df_MOFO_2High[-1, ] # this gets rid of gameId row
# View(corr_df_MOFO_2High %>% arrange(desc(PostSnap_MOF_Num)))
rm(corr_matrix_MOFO_2High)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_MOFO_2High <- corr_df_MOFO_2High %>% filter(abs(PostSnap_MOF_Num) >= 0.25)
rownames(top_variables_MOFO_2High) # keep in mind PostSnap_MOF_Num obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_MOFO_2High <- top_variables_MOFO_2High[, colnames(top_variables_MOFO_2High) %in% rownames(top_variables_MOFO_2High)]

MOFO_Features_1High <- Stats_ByFullPlay_Final %>% filter(num_safeties_pre_snap == 1) %>%
  select(c("PostSnap_MOF_Num", "min_SafetyAbsHorizDistToMOF_PreSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Max_Y_AbsSpeed_AtSnap_AnySafety", 
           "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety"))

corr_matrix_MOFO_1High <- MOFO_Features_1High %>%
  select(where(is.numeric)) %>%  
  cor(use = "complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with PostSnap_MOF_Num
corr_df_MOFO_1High <- as.data.frame(corr_matrix_MOFO_1High)
corr_df_MOFO_1High <- corr_df_MOFO_1High %>% select(-"gameId")
corr_df_MOFO_1High <- corr_df_MOFO_1High[-1, ] # this gets rid of gameId row
# View(corr_df_MOFO_1High %>% arrange(desc(PostSnap_MOF_Num)))
rm(corr_matrix_MOFO_1High)

# Now take all variables with at least a correlation of 0.1 in either direction (lower standard b/c we're picking from fewer variables)
top_variables_MOFO_1High <- corr_df_MOFO_1High %>% filter(abs(PostSnap_MOF_Num) >= 0.1)
rownames(top_variables_MOFO_1High) # keep in mind PostSnap_MOF_Num obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_MOFO_1High <- top_variables_MOFO_1High[, colnames(top_variables_MOFO_1High) %in% rownames(top_variables_MOFO_1High)]

Entropy_Features_AllPlays <- Stats_ByFullPlay_Final %>%
  select(c("Snap_Entropy", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety"))

corr_matrix_Entropy_AllPlays <- Entropy_Features_AllPlays %>%
  select(where(is.numeric)) %>%  
  cor(use = "complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with Snap_Entropy
corr_df_Entropy_AllPlays <- as.data.frame(corr_matrix_Entropy_AllPlays)
corr_df_Entropy_AllPlays <- corr_df_Entropy_AllPlays %>% select(-"gameId")
corr_df_Entropy_AllPlays <- corr_df_Entropy_AllPlays[-1, ] # this gets rid of gameId row
# View(corr_df_Entropy_AllPlays %>% arrange(desc(Snap_Entropy)))
rm(corr_matrix_Entropy_AllPlays)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_Entropy_AllPlays <- corr_df_Entropy_AllPlays %>% filter(abs(Snap_Entropy) >= 0.25)
rownames(top_variables_Entropy_AllPlays) # keep in mind Snap_Entropy obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_Entropy_AllPlays <- top_variables_Entropy_AllPlays[, colnames(top_variables_Entropy_AllPlays) %in% rownames(top_variables_Entropy_AllPlays)]

Entropy_Features_2High <- Stats_ByFullPlay_Final %>% filter(num_safeties_pre_snap == 2) %>%
  select(c("Snap_Entropy", "X_Diff_BetweenSafeties_AtSnap", "TotDist_BetweenSafeties_AtSnap",
           "min_SafetyAbsHorizDistToMOF_PreSnap", "X_Vel_Diff_BetweenSafeties_AtSnap",
           "Y_Vel_Diff_BetweenSafeties_AtSnap", "TotSpeed_Diff_BetweenSafeties_AtSnap",
           "X_Acc_Diff_BetweenSafeties_AtSnap", "Y_Acc_Diff_BetweenSafeties_AtSnap",           
           "TotAcc_Diff_BetweenSafeties_AtSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap", 
           "Max_Y_AbsSpeed_AtSnap_AnySafety", "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety"))

corr_matrix_Entropy_2High <- Entropy_Features_2High %>%
  select(where(is.numeric)) %>%  
  cor(use = "complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with Snap_Entropy
corr_df_Entropy_2High <- as.data.frame(corr_matrix_Entropy_2High)
corr_df_Entropy_2High <- corr_df_Entropy_2High %>% select(-"gameId")
corr_df_Entropy_2High <- corr_df_Entropy_2High[-1, ] # this gets rid of gameId row
# View(corr_df_Entropy_2High %>% arrange(desc(Snap_Entropy)))
rm(corr_matrix_Entropy_2High)

# Now take all variables with at least a correlation of 0.25 in either direction
top_variables_Entropy_2High <- corr_df_Entropy_2High %>% filter(abs(Snap_Entropy) >= 0.25)
rownames(top_variables_Entropy_2High) # keep in mind Snap_Entropy obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_Entropy_2High <- top_variables_Entropy_2High[, colnames(top_variables_Entropy_2High) %in% rownames(top_variables_Entropy_2High)]

Entropy_Features_1High <- Stats_ByFullPlay_Final %>% filter(num_safeties_pre_snap == 1) %>%
  select(c("Snap_Entropy", "min_SafetyAbsHorizDistToMOF_PreSnap", "Max_VertCreptDistance_AnySafety",
           "Max_TotalCreptDistance_ToBall_AnySafety", "Max_PreSnap_X_vel_TowardBall_AnySafety",
           "Max_PreSnap_X_acc_TowardBall_AnySafety", "Max_Y_AbsSpeed_AtSnap_AnySafety", 
           "Max_Y_AbsAcc_AtSnap_AnySafety", "Max_Y_AbsDistFromMOF_AtSnap_AnySafety"))

corr_matrix_Entropy_1High <- Entropy_Features_1High %>%
  select(where(is.numeric)) %>%  
  cor(use = "complete.obs") %>%  
  round(2)  
# Now see which variables had strongest positive or negative correlation with Snap_Entropy
corr_df_Entropy_1High <- as.data.frame(corr_matrix_Entropy_1High)
corr_df_Entropy_1High <- corr_df_Entropy_1High %>% select(-"gameId")
corr_df_Entropy_1High <- corr_df_Entropy_1High[-1, ] # this gets rid of gameId row
# View(corr_df_Entropy_1High %>% arrange(desc(Snap_Entropy)))
rm(corr_matrix_Entropy_1High)

# Now take all variables with at least a correlation of 0.1 in either direction (lower standard b/c we're picking from fewer variables)
top_variables_Entropy_1High <- corr_df_Entropy_1High %>% filter(abs(Snap_Entropy) >= 0.1)
rownames(top_variables_Entropy_1High) # keep in mind Snap_Entropy obviously isn't a predictor variable
# And make it so the only columns in this new DF align with the rows in that DF
top_variables_Entropy_1High <- top_variables_Entropy_1High[, colnames(top_variables_Entropy_1High) %in% rownames(top_variables_Entropy_1High)]

# Now test out some graphs
Stats_ByFullPlay_2High <- Stats_ByFullPlay_Final %>% filter(num_safeties_pre_snap == 2)
Stats_ByFullPlay_1High <- Stats_ByFullPlay_Final %>% filter(num_safeties_pre_snap == 1)

# Diagnose features we should be graphing
# View(top_variables_MOFO_AllPlays)
# All plays: X_Diff_BetweenSafeties_AtSnap, Max_VertCreptDistance_AnySafety, X_Vel_Diff_BetweenSafeties_AtSnap AND/OR Max_PreSnap_X_vel_TowardBall_AnySafety
Plot6 <- ggplot(data = Stats_ByFullPlay_Final) +
  geom_point(aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 10), ylim = c(0, 1)) +
  labs(x = "Vertical Stagger b/w Safeties at Snap (Yards)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Vertical Stagger Between Safeties",
       subtitle = "Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 4381)",
       caption = "Vertical Stagger: vertical distance b/w safeties at time of snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot7 <- ggplot(data = Stats_ByFullPlay_Final) +
  geom_point(aes(x = Max_VertCreptDistance_AnySafety, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = Max_VertCreptDistance_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 7), ylim = c(0, 1)) +
  labs(x = "Highest Vertical 'Creep' Distance by a Safety (Yards)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Highest Vertical 'Creep' Distance by a Safety",
       subtitle = "Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 4381)",
       caption = "Vertical 'Creep' Distance: How Far Safety Moved Toward LOS Before Snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot8 <- ggplot(data = Stats_ByFullPlay_Final) +
  geom_point(aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 6), ylim = c(0, 1)) +
  labs(x = "Difference in Vertical Velocities b/w Safeties at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Difference in Vertical Velocities b/w Safeties at Snap",
       subtitle = "Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 4381)",
       caption = "Vertical Velocities: each safety's yards/sec, but only toward or away from LOS (i.e. parallel to sideline)",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot9 <- ggplot(data = Stats_ByFullPlay_Final) +
  geom_point(aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 5), ylim = c(0, 1)) +
  labs(x = "Maximum Pre-Snap Speed Toward Ball by a Safety (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Maximum Pre-Snap Speed Toward Ball by a Safety",
       subtitle = "Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 4381)",
       caption = "Max Pre-Snap Speed Toward Ball: highest velocity, in direction of ball, at any point before snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

grid.arrange(Plot6, Plot7, ncol = 2)
# grid.arrange(Plot6, Plot7, Plot8, Plot9, ncol = 4) ... don't use, too crowded
grid.arrange(Plot6, Plot7, Plot8, Plot9, nrow = 2, ncol = 2)

# View(top_variables_MOFO_2High)
# 2-high: X_Diff_BetweenSafeties_AtSnap, Max_VertCreptDistance_AnySafety, X_Vel_Diff_BetweenSafeties_AtSnap AND/OR Max_PreSnap_X_vel_TowardBall_AnySafety
Plot10 <- ggplot(data = Stats_ByFullPlay_2High) +
  geom_point(aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = X_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 10), ylim = c(0, 1)) +
  labs(x = "Vertical Stagger b/w Safeties at Snap (Yards)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Vertical Stagger Between Safeties",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Stagger: vertical distance b/w safeties at time of snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot11 <- ggplot(data = Stats_ByFullPlay_2High) +
  geom_point(aes(x = Max_VertCreptDistance_AnySafety, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = Max_VertCreptDistance_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 7), ylim = c(0, 1)) +
  labs(x = "Highest Vertical 'Creep' Distance by a Safety (Yards)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Highest Vertical 'Creep' Distance by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical 'Creep' Distance: How Far Safety Moved Toward LOS Before Snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot12 <- ggplot(data = Stats_ByFullPlay_2High) +
  geom_point(aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = X_Vel_Diff_BetweenSafeties_AtSnap, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 6), ylim = c(0, 1)) +
  labs(x = "Difference in Vertical Velocities b/w Safeties at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Difference in Vertical Velocities b/w Safeties at Snap",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Vertical Velocities: each safety's yards/sec, but only toward or away from LOS (i.e. parallel to sideline)",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot13 <- ggplot(data = Stats_ByFullPlay_2High) +
  geom_point(aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = Max_PreSnap_X_vel_TowardBall_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 5), ylim = c(0, 1)) +
  labs(x = "Maximum Pre-Snap Speed Toward Ball by a Safety (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Maximum Pre-Snap Speed Toward Ball by a Safety",
       subtitle = "Early Down 2-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 3029)",
       caption = "Max Pre-Snap Speed Toward Ball: highest velocity, in direction of ball, at any point before snap",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

grid.arrange(Plot10, Plot11, ncol = 2)
# grid.arrange(Plot10, Plot11, Plot12, Plot13, ncol = 4) ... don't use, too crowded
grid.arrange(Plot10, Plot11, Plot12, Plot13, nrow = 2, ncol = 2)

# View(top_variables_MOFO_1High)
# 1-high: Max_Y_AbsSpeed_AtSnap_AnySafety AND/OR Max_Y_SpeedTowardMOF_AtSnap_AnySafety, Max_Y_AbsAcc_AtSnap_AnySafety, Max_Y_AbsDistFromMOF_AtSnap_AnySafety
Plot14 <- ggplot(data = Stats_ByFullPlay_1High) +
  geom_point(aes(x = Max_Y_AbsSpeed_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = Max_Y_AbsSpeed_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 1)) +
  coord_cartesian(xlim = c(0, 5), ylim = c(0, 0.5)) +
  labs(x = "Absolute Horizontal Speed by Safety at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Safety's Absolute Horizontal Speed at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Absolute Horizontal Speed: horizontal speed where either right or left counts as positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot15 <- ggplot(data = Stats_ByFullPlay_1High) +
  geom_point(aes(x = Max_Y_SpeedTowardMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = Max_Y_SpeedTowardMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(-5, 5, 1)) +
  coord_cartesian(xlim = c(-5, 2), ylim = c(0, 0.5)) +
  labs(x = "Horizontal Speed Toward MOF by Safety at Snap (Yds/Sec)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Safety's Horizontal Speed Toward MOF at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Horizontal Speed Toward MOF: moving horizontally toward MOF is positive, toward sideline is negative",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot16 <- ggplot(data = Stats_ByFullPlay_1High) +
  geom_point(aes(x = Max_Y_AbsDistFromMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = Max_Y_AbsDistFromMOF_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 9), ylim = c(0, 0.5)) +
  labs(x = "Safety's Horizontal Distance from MOF at the Snap (Yards)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Safety's Horizontal Distance from MOF at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Horizontal Distance from MOF: net distance from middle of field (either right or left counts as positive)",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

Plot17 <- ggplot(data = Stats_ByFullPlay_1High) +
  geom_point(aes(x = Max_Y_AbsAcc_AtSnap_AnySafety, y = PostSnap_MOF_Num), alpha = 0.1) +
  stat_smooth(mapping = aes(x = Max_Y_AbsAcc_AtSnap_AnySafety, y = PostSnap_MOF_Num, color = "red"),
              method = "gam", se = T, span = 0.75) +
  # geom_abline(intercept = 0, slope = 0) +
  # scale_y_continuous(breaks = seq(70, 130, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 2)) +
  coord_cartesian(xlim = c(0, 5), ylim = c(0, 0.5)) +
  labs(x = "Absolute Horizontal Acceleration by Safety at Snap (Yds/Sec^2)", y = "MOFO Coverage Rate",
       title = "How MOFO Coverage Rate Depends on Safety's Horizontal Acceleration at the Snap",
       subtitle = "Early Down 1-High Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022 (n = 1352)",
       caption = "Absolute Horizontal Acc: horizontal acceleration where either right or left counts as positive",
       color = " ") +
  theme_bw() + 
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        legend.position = "none")

grid.arrange(Plot14, Plot15, ncol = 2)
# grid.arrange(Plot14, Plot15, Plot16, Plot17, ncol = 4) # too messy, don't use
grid.arrange(Plot14, Plot15, Plot16, Plot17, nrow = 2, ncol = 2)
