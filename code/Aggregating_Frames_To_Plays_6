library(tidyverse)
library(reactable)
library(ggplot2)
library(gt)
library(webshot)
library(webshot2)

# If needed, can read in final_dropbacks_merged file that was defined earlier in "incorporating model code" file
final_dropbacks_merged <- read_csv("final_dropbacks_merged.csv")

# Start with a version where each row represents a player on a full play (i.e. not a frame) 
# NOTE: if we want "last element," just replace the [1] with [length(ball_x)], or whatever the variable was
colnames(final_dropbacks_merged)
# Realistically, this one won't be as useful as the "full play" version, but good to have as a formality
Stats_ByPlayerAndPlay_Final <- final_dropbacks_merged %>% filter(club != "football") %>%
  group_by(gameId, playId, nflId, displayName) %>%
  summarize(Frames = max(frameId), down = max(down), distance = max(yardsToGo), Team = max(club),
            PlayerSideOfBall = PlayerSideOfBall[1], Player_Role = max(Player_Role), PosTeam = max(posteam), 
            DefTeam = max(defteam), posteam_type = max(posteam_type), # HomeTeam = max(homeTeamAbbr), AwayTeam = max(visitorTeamAbbr),
            yardline_100 = max(yardline_100), yardsToGo = max(yardsToGo), # Dropback = max(isDropback),
            # BallCarrierID = max(ballCarrierId), BallCarrierName = max(ballCarrierDisplayName),
            IsBallCarrier = max(IsBallCarrier), Description = max(playDescription), 
            PenaltyYards = max(penaltyYards), 
            NetYardage = max(yardsGained), PrePenaltyYardage = max(prePenaltyYardsGained), 
            # YdsBeforeContact = max(YdsBeforeContact), YdsAfterContact = max(YdsAfterContact),
            # TeamDefendersInBox = max(defendersInTheBox),
            xpass = max(xpass), # pass_oe = max(pass_oe),
            EP = max(expectedPoints), EPA = max(expectedPointsAdded), EPSuccess = max(success),
            posteam_type = max(posteam_type), yardline_100 = max(yardline_100), # Shotgun = max(shotgun),
            aligned_left_receivers = max(aligned_left_receivers), 
            aligned_right_receivers = max(aligned_right_receivers), aligned_total_receivers = max(aligned_total_receivers),
            # sp = max(sp), goal_to_go = max(goal_to_go),
            DropbackType = max(passResult),
            # TargetReceiver_X_AtArrival = max(targetX), TargetReceiver_Y_AtArrival = max(targetY),
            RPO = max(pff_runPassOption), Coverage_Scheme = max(pff_passCoverage),
            ManVsZone = max(pff_manZone), PostSnap_MOF = max(PostSnap_MOF), PostSnap_MOF_Num = max(PostSnap_MOF_Num),
            # PlayClock_AtSnap = max(playClockAtSnap), no_huddle = max(no_huddle),
            pass_horiz_location = max(pass_location), air_yards = max(air_yards), team_yards_after_catch = max(yards_after_catch), 
            Team_PassTD = max(pass_touchdown), Touchdown = max(touchdown), 
            Team_RushTD = max(rush_touchdown), Team_ReturnTD = max(return_touchdown), 
            td_team = max(td_team), WP = max(wp), WPA = max(wpa), DefWPA = max(DefWPA), WPSuccess = max(WPSuccess),
            OffTeam_Fumble = max(fumble), OffTeam_LostFumble = max(fumble_lost), 
            penalty_team = max(penalty_team), penalty_type = max(penalty_type), 
            return_team = max(return_team), return_yards = max(return_yards),
            Completion_Prob = max(cp), CPOE = max(cpoe),
            Team_Interception = max(interception), Off_AllowedSafety = max(safety), Team_Completion = max(complete_pass),
            Team_PassAttempt = max(pass_attempt), TeamTFL = max(tackled_for_loss), 
            # Temperature = max(Temperature), roof = max(roof), surface = max(surface), 
            first_down = max(first_down), out_of_bounds = max(out_of_bounds), PlayDirection = max(playDirection), 
            Indiv_RushAtt = max(hadRushAttempt), Indiv_RushYds = max(rushingYards),
            Indiv_Dropback = max(hadDropback), Indiv_PassYds = max(passingYards),
            Indiv_SackYdsLost = max(sackYardsAsOffense), Indiv_Reception = max(hadPassReception),
            Indiv_RecYds = max(receivingYards), Indiv_Targets = max(wasTargetedReceiver),
            Indiv_YardsAfterCatch = max(yardageGainedAfterTheCatch), Indiv_Fumbles = max(fumbles),
            Indiv_FumbleLost = max(fumbleLost), Indiv_AssistTKL = max(assistedTackle),
            Indiv_ForcedFumble = max(forcedFumbleAsDefense), Indiv_PassDefensed = max(passDefensed),
            Indiv_QBHit = max(quarterbackHit), Indiv_SoloTKL = max(soloTackle),
            Indiv_HalfSackYds_Defense = max(halfSackYardsAsDefense), Indiv_FullSackYds_Defense = max(sackYardsAsDefense),
            # Indiv_TFLYardage = max(tackleForALossYardage) ... keep in mind any TFL on a dropback is a sack
            Indiv_DefInterception = max(hadInterception), Indiv_DefINT_Yards = max(interceptionYards),
            Indiv_FR = max(fumbleRecoveries), Indiv_FumbleRecYds = max(fumbleRecoveryYards),
            Indiv_PassRusher = max(wasInitialPassRusher), Indiv_Pressure = max(causedPressure),
            Indiv_MotionDuringSnap = max(inMotionAtBallSnap), Indiv_MotionSinceLineSet = max(motionSinceLineset),
            Indiv_ShiftSinceLineSet = max(shiftSinceLineset), Indiv_RanRoute = max(wasRunningRoute),
            Indiv_RouteType = max(routeRan), Indiv_CoverageAssignment = max(pff_defensiveCoverageAssignment),
            Indiv_PrimDefCoverageMatchup_ID = max(pff_primaryDefensiveCoverageMatchupNflId),
            Indiv_SecondDefCoverageMatchup_ID = max(pff_secondaryDefensiveCoverageMatchupNflId),
            Ball_X_Snap = max(Ball_X_Snap), Ball_Y_Snap = max(Ball_Y_Snap),
            Initial_X = x[1], Initial_Y = y[1], X_AtSnap = max(PreSnap_x), Y_AtSnap = max(PreSnap_y),
            MaxSpeed = max(s), AvgSpeed = mean(s),
            MaxAcceleration = max(a), AvgAcceleration = mean(a),
            TotDistance = sum(dis), InitialOrientation = o[1], InitialDirection = dir[1],
            Initial_X_DistFromBall = X_DistFromBall[1], Initial_X_AbsDistFromBall = X_AbsDistFromBall[1],
            Initial_Y_DistFromBall = Y_DistFromBall[1], Initial_Y_AbsDistFromBall = Y_AbsDistFromBall[1],
            Initial_Tot_DistFromBall = TotDistFromBall[1],
            Initial_Y_DistFromMOF = Y_distFromMOF[1], Initial_Y_AbsDistFromMOF = abs(Y_distFromMOF[1]),
            Max_X_DistFromBall = max(X_DistFromBall), Max_X_AbsDistFromBall = max(X_AbsDistFromBall),
            Max_Y_DistFromBall = max(Y_DistFromBall), Max_Y_AbsDistFromBall = max(Y_AbsDistFromBall), 
            Max_Tot_DistFromBall = max(TotDistFromBall),
            # height = max(height_inches), weight = max(weight), 
            PosGroup = max(PosGroup), official_position = max(position),
            is_pre_snap_safety = max(is_pre_snap_safety), is_post_snap_safety = max(is_post_snap_safety),
            num_safeties_pre_snap = max(num_safeties_pre_snap), num_safeties_post_snap = max(num_safeties_post_snap),
            pre_snap_safety_1_ID = max(pre_snap_safety_1), pre_snap_safety_1_name = max(pre_snap_safety_1_name),
            pre_snap_safety_2_ID = max(pre_snap_safety_2), pre_snap_safety_2_name = max(pre_snap_safety_2_name),
            post_snap_safety_1_ID = max(post_snap_safety_1), post_snap_safety_1_name = max(post_snap_safety_1_name),
            post_snap_safety_2_ID = max(post_snap_safety_2), post_snap_safety_2_name = max(post_snap_safety_2_name),
            pre_snap_safety_1_X_AtSnap = max(pre_snap_safety_1_X_AtSnap), pre_snap_safety_1_Y_AtSnap = max(pre_snap_safety_1_Y_AtSnap), 
            pre_snap_safety_2_X_AtSnap = max(pre_snap_safety_2_X_AtSnap), pre_snap_safety_2_Y_AtSnap = max(pre_snap_safety_2_Y_AtSnap), 
            X_Diff_BetweenSafeties_AtSnap = max(X_Diff_BetweenSafeties_AtSnap),
            Y_Diff_BetweenSafeties_AtSnap = max(Y_Diff_BetweenSafeties_AtSnap),
            TotDist_BetweenSafeties_AtSnap = max(TotDist_BetweenSafeties_AtSnap),
            Max_PreSnap_x_vel_component = max(x_vel_component), Max_PreSnap_y_vel_component = max(y_vel_component), 
            Max_PreSnap_x_acc_component = max(x_acc_component), Max_PreSnap_y_acc_component = max(y_acc_component),
            Mean_x_vel_component = mean(x_vel_component), Mean_y_vel_component = mean(y_vel_component), 
            Mean_x_acc_component = mean(x_acc_component), Mean_y_acc_component = mean(y_acc_component),
            MOFO_probability = max(MOFO_probability), min_SafetyAbsHorizDistToMOF_PreSnap = max(min_SafetyAbsHorizDistToMOF_PreSnap),
            X_Vel_Diff_BetweenSafeties_AtSnap = max(X_Vel_Diff_BetweenSafeties_AtSnap),           
            Y_Vel_Diff_BetweenSafeties_AtSnap = max(Y_Vel_Diff_BetweenSafeties_AtSnap),
            TotSpeed_Diff_BetweenSafeties_AtSnap = max(TotSpeed_Diff_BetweenSafeties_AtSnap),        
            X_Acc_Diff_BetweenSafeties_AtSnap = max(X_Acc_Diff_BetweenSafeties_AtSnap),
            Y_Acc_Diff_BetweenSafeties_AtSnap = max(Y_Acc_Diff_BetweenSafeties_AtSnap),          
            TotAcc_Diff_BetweenSafeties_AtSnap = max(TotAcc_Diff_BetweenSafeties_AtSnap),
            Max_VertCreptDistance_AnySafety = max(Max_VertCreptDistance_AnySafety),           
            Max_TotalCreptDistance_ToBall_AnySafety = max(Max_TotalCreptDistance_ToBall_AnySafety),
            Min_PreSnap_X_vel_component_AnySafety = min(Min_PreSnap_X_vel_component_AnySafety),    
            Min_PreSnap_X_acc_component_AnySafety = min(Min_PreSnap_X_acc_component_AnySafety),
            Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap = max(Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap),
            Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap = max(Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap),
            Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap = max(Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap),
            Max_Y_AbsSpeed_AtSnap_AnySafety = max(Max_Y_AbsSpeed_AtSnap_AnySafety),   
            Max_Y_AbsAcc_AtSnap_AnySafety = max(Max_Y_AbsAcc_AtSnap_AnySafety),              
            Max_Y_AbsDistFromMOF_AtSnap_AnySafety = max(Max_Y_AbsDistFromMOF_AtSnap_AnySafety),
            Max_Y_SpeedTowardMOF_AtSnap_AnySafety = max(Max_Y_SpeedTowardMOF_AtSnap_AnySafety),
            Min_Y_SpeedTowardMOF_AtSnap_AnySafety = min(Max_Y_SpeedTowardMOF_AtSnap_AnySafety),
            Max_Y_AccTowardMOF_AtSnap_AnySafety = max(Max_Y_AccTowardMOF_AtSnap_AnySafety),
            Min_Y_AccTowardMOF_AtSnap_AnySafety = min(Max_Y_AccTowardMOF_AtSnap_AnySafety),
            Safety1_Initial_X = Safety1_Initial_X[1], Safety1_Initial_Y = Safety1_Initial_Y[1], 
            Safety1_Max_PreSnap_PreSnapSpeed = max(Safety1_Max_PreSnapSpeed), Safety1_Avg_PreSnapSpeed = mean(Safety1_Avg_PreSnapSpeed),
            Safety1_Max_PreSnapAcceleration = max(Safety1_Max_PreSnapAcceleration), 
            Safety1_Avg_PreSnapAcceleration = mean(Safety1_Avg_PreSnapAcceleration),
            Safety1_Max_PreSnap_x_vel_component = max(Safety1_Max_PreSnap_x_vel_component), 
            Safety1_Max_PreSnap_y_vel_component = max(Safety1_Max_PreSnap_y_vel_component), 
            Safety1_Max_PreSnap_x_acc_component = max(Safety1_Max_PreSnap_x_acc_component), 
            Safety1_Max_PreSnap_y_acc_component = max(Safety1_Max_PreSnap_y_acc_component),
            Safety1_Min_PreSnap_x_vel_component = min(Safety1_Min_PreSnap_x_vel_component), 
            Safety1_Min_PreSnap_y_vel_component = min(Safety1_Min_PreSnap_y_vel_component), 
            Safety1_Min_PreSnap_x_acc_component = min(Safety1_Min_PreSnap_x_acc_component), 
            Safety1_Min_PreSnap_y_acc_component = min(Safety1_Min_PreSnap_y_acc_component),
            Safety1_Mean_PreSnap_x_vel_component = mean(Safety1_Mean_PreSnap_x_vel_component), 
            Safety1_Mean_PreSnap_y_vel_component = mean(Safety1_Mean_PreSnap_y_vel_component), 
            Safety1_Mean_PreSnap_x_acc_component = mean(Safety1_Mean_PreSnap_x_acc_component), 
            Safety1_Mean_PreSnap_y_acc_component = mean(Safety1_Mean_PreSnap_y_acc_component), 
            Safety1_Tot_PreSnapDistance = sum(Safety1_Tot_PreSnapDistance), Safety1_InitialOrientation = Safety1_InitialOrientation[1],
            Safety1_InitialDirection = Safety1_InitialDirection[1], Safety1_Initial_X_DistFromBall = Safety1_Initial_X_DistFromBall[1],
            Safety1_Initial_Y_DistFromBall = Safety1_Initial_Y_DistFromBall[1], Safety1_Initial_Tot_DistFromBall = Safety1_Initial_Tot_DistFromBall[1],
            Safety1_Initial_Y_DistFromMOF = Safety1_Initial_Y_DistFromMOF[1], Safety1_Initial_Y_AbsDistFromMOF = Safety1_Initial_Y_AbsDistFromMOF[1],
            Safety1_Max_PreSnap_X_DistFromBall = max(Safety1_Max_PreSnap_X_DistFromBall),
            Safety1_Max_PreSnap_Y_DistFromBall = max(Safety1_Max_PreSnap_Y_DistFromBall), 
            Safety1_Min_PreSnap_Y_DistFromBall = min(Safety1_Min_PreSnap_Y_DistFromBall), 
            Safety1_Max_PreSnap_Y_AbsDistFromBall = max(Safety1_Max_PreSnap_Y_AbsDistFromBall), 
            Safety1_Max_PreSnap_Tot_DistFromBall = max(Safety1_Max_PreSnap_Tot_DistFromBall),
            Safety1_X_DistFromBall_AtSnap = max(Safety1_X_DistFromBall_AtSnap),
            Safety1_Y_DistFromBall_AtSnap = max(Safety1_Y_DistFromBall_AtSnap),
            Safety1_Y_AbsDistFromBall_AtSnap = max(Safety1_Y_AbsDistFromBall_AtSnap),
            Safety1_Y_DistFromMOF_AtSnap = max(Safety1_Y_DistFromMOF_AtSnap),
            Safety1_Y_AbsDistFromMOF_AtSnap = max(Safety1_Y_AbsDistFromMOF_AtSnap),
            Safety1_Tot_DistFromBall_AtSnap = max(Safety1_Tot_DistFromBall_AtSnap),
            Safety1_Speed_AtSnap = max(Safety1_Speed_AtSnap), Safety1_Acceleration_AtSnap = max(Safety1_Acceleration_AtSnap),
            Safety1_x_vel_component_AtSnap = max(Safety1_x_vel_component_AtSnap),
            Safety1_y_vel_component_AtSnap = max(Safety1_y_vel_component_AtSnap),
            Safety1_x_acc_component_AtSnap = max(Safety1_x_acc_component_AtSnap),
            Safety1_y_acc_component_AtSnap = max(Safety1_y_acc_component_AtSnap),
            Safety1_Orientation_AtSnap = max(Safety1_Orientation_AtSnap), Safety1_Direction_AtSnap = max(Safety1_Direction_AtSnap),
            Safety1_X_3SecBeforeSnap = max(Safety1_X_3SecBeforeSnap), Safety1_Y_3SecBeforeSnap = max(Safety1_Y_3SecBeforeSnap), 
            Safety1_VertCreptDistance = max(Safety1_VertCreptDistance), Safety1_TotalCreptDistance_TowardBall = max(Safety1_TotalCreptDistance_TowardBall),
            Safety1_PosGroup = max(Safety1_PosGroup), Safety1_position = max(Safety1_position),
            x_spline_basis1_p1 = max(x_spline_basis1_p1), x_spline_basis2_p1 = max(x_spline_basis2_p1), 
            x_spline_basis3_p1 = max(x_spline_basis3_p1), x_spline_basis4_p1 = max(x_spline_basis4_p1),
            x_spline_basis5_p1 = max(x_spline_basis5_p1), # x_spline_basis6_p1 = max(x_spline_basis6_p1),                       
         #  x_spline_basis7_p1 = max(x_spline_basis7_p1), x_spline_basis8_p1 = max(x_spline_basis8_p1),                     
         #  x_spline_basis9_p1 = max(x_spline_basis9_p1), x_spline_basis10_p1 = max(x_spline_basis10_p1),                   
            y_spline_basis1_p1 = max(y_spline_basis1_p1), y_spline_basis2_p1 = max(y_spline_basis2_p1),          
            y_spline_basis3_p1 = max(y_spline_basis3_p1), y_spline_basis4_p1 = max(y_spline_basis4_p1),                  
            y_spline_basis5_p1 = max(y_spline_basis5_p1), # y_spline_basis6_p1 = max(y_spline_basis6_p1),                 
         #  y_spline_basis7_p1 = max(y_spline_basis7_p1), y_spline_basis8_p1 = max(y_spline_basis8_p1),                  
         #  y_spline_basis9_p1 = max(y_spline_basis9_p1), y_spline_basis10_p1 = max(y_spline_basis10_p1),                  
            Safety2_Initial_X = Safety2_Initial_X[1], Safety2_Initial_Y = Safety2_Initial_Y[1], 
            Safety2_Max_PreSnap_PreSnapSpeed = max(Safety2_Max_PreSnapSpeed), Safety2_Avg_PreSnapSpeed = mean(Safety2_Avg_PreSnapSpeed),
            Safety2_Max_PreSnapAcceleration = max(Safety2_Max_PreSnapAcceleration), 
            Safety2_Avg_PreSnapAcceleration = mean(Safety2_Avg_PreSnapAcceleration),
            Safety2_Max_PreSnap_x_vel_component = max(Safety2_Max_PreSnap_x_vel_component), 
            Safety2_Max_PreSnap_y_vel_component = max(Safety2_Max_PreSnap_y_vel_component), 
            Safety2_Max_PreSnap_x_acc_component = max(Safety2_Max_PreSnap_x_acc_component), 
            Safety2_Max_PreSnap_y_acc_component = max(Safety2_Max_PreSnap_y_acc_component),
            Safety2_Min_PreSnap_x_vel_component = min(Safety2_Min_PreSnap_x_vel_component), 
            Safety2_Min_PreSnap_y_vel_component = min(Safety2_Min_PreSnap_y_vel_component), 
            Safety2_Min_PreSnap_x_acc_component = min(Safety2_Min_PreSnap_x_acc_component), 
            Safety2_Min_PreSnap_y_acc_component = min(Safety2_Min_PreSnap_y_acc_component),
            Safety2_Mean_PreSnap_x_vel_component = mean(Safety2_Mean_PreSnap_x_vel_component), 
            Safety2_Mean_PreSnap_y_vel_component = mean(Safety2_Mean_PreSnap_y_vel_component), 
            Safety2_Mean_PreSnap_x_acc_component = mean(Safety2_Mean_PreSnap_x_acc_component), 
            Safety2_Mean_PreSnap_y_acc_component = mean(Safety2_Mean_PreSnap_y_acc_component), 
            Safety2_Tot_PreSnapDistance = sum(Safety2_Tot_PreSnapDistance), Safety2_InitialOrientation = Safety2_InitialOrientation[1],
            Safety2_InitialDirection = Safety2_InitialDirection[1], Safety2_Initial_X_DistFromBall = Safety2_Initial_X_DistFromBall[1],
            Safety2_Initial_Y_DistFromBall = Safety2_Initial_Y_DistFromBall[1], Safety2_Initial_Tot_DistFromBall = Safety2_Initial_Tot_DistFromBall[1],
            Safety2_Initial_Y_DistFromMOF = Safety2_Initial_Y_DistFromMOF[1], Safety2_Initial_Y_AbsDistFromMOF = Safety2_Initial_Y_AbsDistFromMOF[1],
            Safety2_Max_PreSnap_X_DistFromBall = max(Safety2_Max_PreSnap_X_DistFromBall),
            Safety2_Max_PreSnap_Y_DistFromBall = max(Safety2_Max_PreSnap_Y_DistFromBall), 
            Safety2_Min_PreSnap_Y_DistFromBall = min(Safety2_Min_PreSnap_Y_DistFromBall), 
            Safety2_Max_PreSnap_Y_AbsDistFromBall = max(Safety2_Max_PreSnap_Y_AbsDistFromBall), 
            Safety2_Max_PreSnap_Tot_DistFromBall = max(Safety2_Max_PreSnap_Tot_DistFromBall),
            Safety2_X_DistFromBall_AtSnap = max(Safety2_X_DistFromBall_AtSnap),
            Safety2_Y_DistFromBall_AtSnap = max(Safety2_Y_DistFromBall_AtSnap),
            Safety2_Y_AbsDistFromBall_AtSnap = max(Safety2_Y_AbsDistFromBall_AtSnap),
            Safety2_Y_DistFromMOF_AtSnap = max(Safety2_Y_DistFromMOF_AtSnap),
            Safety2_Y_AbsDistFromMOF_AtSnap = max(Safety2_Y_AbsDistFromMOF_AtSnap),
            Safety2_Tot_DistFromBall_AtSnap = max(Safety2_Tot_DistFromBall_AtSnap),
            Safety2_Speed_AtSnap = max(Safety2_Speed_AtSnap), Safety2_Acceleration_AtSnap = max(Safety2_Acceleration_AtSnap),
            Safety2_x_vel_component_AtSnap = max(Safety2_x_vel_component_AtSnap),
            Safety2_y_vel_component_AtSnap = max(Safety2_y_vel_component_AtSnap),
            Safety2_x_acc_component_AtSnap = max(Safety2_x_acc_component_AtSnap),
            Safety2_y_acc_component_AtSnap = max(Safety2_y_acc_component_AtSnap),
            Safety2_Orientation_AtSnap = max(Safety2_Orientation_AtSnap), Safety2_Direction_AtSnap = max(Safety2_Direction_AtSnap),
            Safety2_X_3SecBeforeSnap = max(Safety2_X_3SecBeforeSnap), Safety2_Y_3SecBeforeSnap = max(Safety2_Y_3SecBeforeSnap), 
            Safety2_VertCreptDistance = max(Safety2_VertCreptDistance), Safety2_TotalCreptDistance_TowardBall = max(Safety2_TotalCreptDistance_TowardBall),
            Safety2_PosGroup = max(Safety2_PosGroup), Safety2_position = max(Safety2_position),
            x_spline_basis1_p2 = max(x_spline_basis1_p2), x_spline_basis2_p2 = max(x_spline_basis2_p2), 
            x_spline_basis3_p2 = max(x_spline_basis3_p2), x_spline_basis4_p2 = max(x_spline_basis4_p2),
            x_spline_basis5_p2 = max(x_spline_basis5_p2), # x_spline_basis6_p2 = max(x_spline_basis6_p2),                       
          #  x_spline_basis7_p2 = max(x_spline_basis7_p2), x_spline_basis8_p2 = max(x_spline_basis8_p2),                     
          #  x_spline_basis9_p2 = max(x_spline_basis9_p2), x_spline_basis10_p2 = max(x_spline_basis10_p2),                   
            y_spline_basis1_p2 = max(y_spline_basis1_p2), y_spline_basis2_p2 = max(y_spline_basis2_p2),          
            y_spline_basis3_p2 = max(y_spline_basis3_p2), y_spline_basis4_p2 = max(y_spline_basis4_p2),                  
            y_spline_basis5_p2 = max(y_spline_basis5_p2)) # y_spline_basis6_p2 = max(y_spline_basis6_p2),                 
          #  y_spline_basis7_p2 = max(y_spline_basis7_p2), y_spline_basis8_p2 = max(y_spline_basis8_p2),                  
          #  y_spline_basis9_p2 = max(y_spline_basis9_p2), y_spline_basis10_p2 = max(y_spline_basis10_p2))

Stats_ByPlayerAndPlay_Final <- Stats_ByPlayerAndPlay_Final %>%
  mutate(Indiv_OffTD = ifelse(PlayerSideOfBall %in% "offense" & !is.na(IsBallCarrier) & IsBallCarrier == 1 & !is.na(td_team) & td_team == PosTeam, 1,
               ifelse(PlayerSideOfBall %in% "offense" & (is.na(IsBallCarrier) | IsBallCarrier == 0 | is.na(td_team) | td_team != PosTeam), 0, NA)))
Stats_ByPlayerAndPlay_Final <- Stats_ByPlayerAndPlay_Final %>%
  mutate(Indiv_ShiftOrMotion = (Indiv_MotionDuringSnap + Indiv_MotionSinceLineSet + Indiv_ShiftSinceLineSet), na.rm = TRUE)

# Now create a version where each row represents an entire play (not a player or a frame)
Stats_ByFullPlay_Final <- final_dropbacks_merged %>%
  group_by(gameId, playId) %>%
  summarize(Frames = n(), down = max(down), distance = max(yardsToGo), PosTeam = max(posteam), 
            DefTeam = max(defteam), posteam_type = max(posteam_type), # HomeTeam = max(homeTeamAbbr), AwayTeam = max(visitorTeamAbbr),
            yardline_100 = max(yardline_100), yardsToGo = max(yardsToGo), # Dropback = max(isDropback),
            # BallCarrierID = max(ballCarrierId), BallCarrierName = max(ballCarrierDisplayName),
            Description = max(playDescription), PenaltyYards = max(penaltyYards), 
            NetYardage = max(yardsGained), PrePenaltyYardage = max(prePenaltyYardsGained), 
            # YdsBeforeContact = max(YdsBeforeContact), YdsAfterContact = max(YdsAfterContact),
            # TeamDefendersInBox = max(defendersInTheBox),
            xpass = max(xpass), # pass_oe = max(pass_oe),
            EP = max(expectedPoints), EPA = max(expectedPointsAdded), EPSuccess = max(success),
            posteam_type = max(posteam_type), yardline_100 = max(yardline_100), # Shotgun = max(shotgun),
            aligned_left_receivers = max(aligned_left_receivers), 
            aligned_right_receivers = max(aligned_right_receivers), aligned_total_receivers = max(aligned_total_receivers),
            # sp = max(sp), goal_to_go = max(goal_to_go),
            DropbackType = max(passResult),
            # TargetReceiver_X_AtArrival = max(targetX), TargetReceiver_Y_AtArrival = max(targetY),
            RPO = max(pff_runPassOption), Coverage_Scheme = max(pff_passCoverage),
            ManVsZone = max(pff_manZone), PostSnap_MOF = max(PostSnap_MOF), PostSnap_MOF_Num = max(PostSnap_MOF_Num),
            # PlayClock_AtSnap = max(playClockAtSnap), no_huddle = max(no_huddle),
            pass_horiz_location = max(pass_location), air_yards = max(air_yards), team_yards_after_catch = max(yards_after_catch), 
            Team_PassTD = max(pass_touchdown), Touchdown = max(touchdown),
            Team_RushTD = max(rush_touchdown), Team_ReturnTD = max(return_touchdown), 
            td_team = max(td_team), WP = max(wp), WPA = max(wpa), DefWPA = max(DefWPA), WPSuccess = max(WPSuccess),
            OffTeam_Fumble = max(fumble), OffTeam_LostFumble = max(fumble_lost), 
            penalty_team = max(penalty_team), penalty_type = max(penalty_type), 
            return_team = max(return_team), return_yards = max(return_yards),
            Completion_Prob = max(cp), CPOE = max(cpoe),
            Team_Interception = max(interception), Off_AllowedSafety = max(safety), Team_Completion = max(complete_pass),
            Team_PassAttempt = max(pass_attempt), TeamTFL = max(tackled_for_loss), 
            # Temperature = max(Temperature), roof = max(roof), surface = max(surface), 
            first_down = max(first_down), out_of_bounds = max(out_of_bounds), PlayDirection = max(playDirection), 
            num_safeties_pre_snap = max(num_safeties_pre_snap), num_safeties_post_snap = max(num_safeties_post_snap),
            pre_snap_safety_1_ID = max(pre_snap_safety_1), pre_snap_safety_1_name = max(pre_snap_safety_1_name),
            pre_snap_safety_2_ID = max(pre_snap_safety_2), pre_snap_safety_2_name = max(pre_snap_safety_2_name),
            post_snap_safety_1_ID = max(post_snap_safety_1), post_snap_safety_1_name = max(post_snap_safety_1_name),
            post_snap_safety_2_ID = max(post_snap_safety_2), post_snap_safety_2_name = max(post_snap_safety_2_name),
            pre_snap_safety_1_X_AtSnap = max(pre_snap_safety_1_X_AtSnap), pre_snap_safety_1_Y_AtSnap = max(pre_snap_safety_1_Y_AtSnap), 
            pre_snap_safety_2_X_AtSnap = max(pre_snap_safety_2_X_AtSnap), pre_snap_safety_2_Y_AtSnap = max(pre_snap_safety_2_Y_AtSnap), 
            X_Diff_BetweenSafeties_AtSnap = max(X_Diff_BetweenSafeties_AtSnap),
            Y_Diff_BetweenSafeties_AtSnap = max(Y_Diff_BetweenSafeties_AtSnap),
            TotDist_BetweenSafeties_AtSnap = max(TotDist_BetweenSafeties_AtSnap),
            MOFO_probability = max(MOFO_probability), min_SafetyAbsHorizDistToMOF_PreSnap = max(min_SafetyAbsHorizDistToMOF_PreSnap),
            X_Vel_Diff_BetweenSafeties_AtSnap = max(X_Vel_Diff_BetweenSafeties_AtSnap),           
            Y_Vel_Diff_BetweenSafeties_AtSnap = max(Y_Vel_Diff_BetweenSafeties_AtSnap),
            TotSpeed_Diff_BetweenSafeties_AtSnap = max(TotSpeed_Diff_BetweenSafeties_AtSnap),        
            X_Acc_Diff_BetweenSafeties_AtSnap = max(X_Acc_Diff_BetweenSafeties_AtSnap),
            Y_Acc_Diff_BetweenSafeties_AtSnap = max(Y_Acc_Diff_BetweenSafeties_AtSnap),          
            TotAcc_Diff_BetweenSafeties_AtSnap = max(TotAcc_Diff_BetweenSafeties_AtSnap),
            Max_VertCreptDistance_AnySafety = max(Max_VertCreptDistance_AnySafety),           
            Max_TotalCreptDistance_ToBall_AnySafety = max(Max_TotalCreptDistance_ToBall_AnySafety),
            Min_PreSnap_X_vel_component_AnySafety = min(Min_PreSnap_X_vel_component_AnySafety),    
            Min_PreSnap_X_acc_component_AnySafety = min(Min_PreSnap_X_acc_component_AnySafety),
            Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap = max(Y_AbsDistFromMOF_Diff_BetweenSafeties_AtSnap),
            Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap = max(Y_SpeedTowardMOF_Diff_BetweenSafeties_AtSnap),
            Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap = max(Y_AccTowardMOF_Diff_BetweenSafeties_AtSnap),
            Max_Y_AbsSpeed_AtSnap_AnySafety = max(Max_Y_AbsSpeed_AtSnap_AnySafety),   
            Max_Y_AbsAcc_AtSnap_AnySafety = max(Max_Y_AbsAcc_AtSnap_AnySafety),              
            Max_Y_AbsDistFromMOF_AtSnap_AnySafety = max(Max_Y_AbsDistFromMOF_AtSnap_AnySafety),
            Max_Y_SpeedTowardMOF_AtSnap_AnySafety = max(Max_Y_SpeedTowardMOF_AtSnap_AnySafety),
            Min_Y_SpeedTowardMOF_AtSnap_AnySafety = min(Max_Y_SpeedTowardMOF_AtSnap_AnySafety),
            Max_Y_AccTowardMOF_AtSnap_AnySafety = max(Max_Y_AccTowardMOF_AtSnap_AnySafety),
            Min_Y_AccTowardMOF_AtSnap_AnySafety = min(Max_Y_AccTowardMOF_AtSnap_AnySafety),
            Safety1_Initial_X = Safety1_Initial_X[1], Safety1_Initial_Y = Safety1_Initial_Y[1], 
            Safety1_Max_PreSnap_PreSnapSpeed = max(Safety1_Max_PreSnapSpeed), Safety1_Avg_PreSnapSpeed = mean(Safety1_Avg_PreSnapSpeed),
            Safety1_Max_PreSnapAcceleration = max(Safety1_Max_PreSnapAcceleration), 
            Safety1_Avg_PreSnapAcceleration = mean(Safety1_Avg_PreSnapAcceleration),
            Safety1_Max_PreSnap_x_vel_component = max(Safety1_Max_PreSnap_x_vel_component), 
            Safety1_Max_PreSnap_y_vel_component = max(Safety1_Max_PreSnap_y_vel_component), 
            Safety1_Max_PreSnap_x_acc_component = max(Safety1_Max_PreSnap_x_acc_component), 
            Safety1_Max_PreSnap_y_acc_component = max(Safety1_Max_PreSnap_y_acc_component),
            Safety1_Min_PreSnap_x_vel_component = min(Safety1_Min_PreSnap_x_vel_component), 
            Safety1_Min_PreSnap_y_vel_component = min(Safety1_Min_PreSnap_y_vel_component), 
            Safety1_Min_PreSnap_x_acc_component = min(Safety1_Min_PreSnap_x_acc_component), 
            Safety1_Min_PreSnap_y_acc_component = min(Safety1_Min_PreSnap_y_acc_component),
            Safety1_Mean_PreSnap_x_vel_component = mean(Safety1_Mean_PreSnap_x_vel_component), 
            Safety1_Mean_PreSnap_y_vel_component = mean(Safety1_Mean_PreSnap_y_vel_component), 
            Safety1_Mean_PreSnap_x_acc_component = mean(Safety1_Mean_PreSnap_x_acc_component), 
            Safety1_Mean_PreSnap_y_acc_component = mean(Safety1_Mean_PreSnap_y_acc_component), 
            Safety1_Tot_PreSnapDistance = sum(Safety1_Tot_PreSnapDistance), Safety1_InitialOrientation = Safety1_InitialOrientation[1],
            Safety1_InitialDirection = Safety1_InitialDirection[1], Safety1_Initial_X_DistFromBall = Safety1_Initial_X_DistFromBall[1],
            Safety1_Initial_Y_DistFromBall = Safety1_Initial_Y_DistFromBall[1], Safety1_Initial_Tot_DistFromBall = Safety1_Initial_Tot_DistFromBall[1],
            Safety1_Initial_Y_DistFromMOF = Safety1_Initial_Y_DistFromMOF[1], Safety1_Initial_Y_AbsDistFromMOF = Safety1_Initial_Y_AbsDistFromMOF[1],
            Safety1_Max_PreSnap_X_DistFromBall = max(Safety1_Max_PreSnap_X_DistFromBall),
            Safety1_Max_PreSnap_Y_DistFromBall = max(Safety1_Max_PreSnap_Y_DistFromBall), 
            Safety1_Min_PreSnap_Y_DistFromBall = min(Safety1_Min_PreSnap_Y_DistFromBall), 
            Safety1_Max_PreSnap_Y_AbsDistFromBall = max(Safety1_Max_PreSnap_Y_AbsDistFromBall), 
            Safety1_Max_PreSnap_Tot_DistFromBall = max(Safety1_Max_PreSnap_Tot_DistFromBall),
            Safety1_X_DistFromBall_AtSnap = max(Safety1_X_DistFromBall_AtSnap),
            Safety1_Y_DistFromBall_AtSnap = max(Safety1_Y_DistFromBall_AtSnap),
            Safety1_Y_AbsDistFromBall_AtSnap = max(Safety1_Y_AbsDistFromBall_AtSnap),
            Safety1_Y_DistFromMOF_AtSnap = max(Safety1_Y_DistFromMOF_AtSnap),
            Safety1_Y_AbsDistFromMOF_AtSnap = max(Safety1_Y_AbsDistFromMOF_AtSnap),
            Safety1_Tot_DistFromBall_AtSnap = max(Safety1_Tot_DistFromBall_AtSnap),
            Safety1_Speed_AtSnap = max(Safety1_Speed_AtSnap), Safety1_Acceleration_AtSnap = max(Safety1_Acceleration_AtSnap),
            Safety1_x_vel_component_AtSnap = max(Safety1_x_vel_component_AtSnap),
            Safety1_y_vel_component_AtSnap = max(Safety1_y_vel_component_AtSnap),
            Safety1_x_acc_component_AtSnap = max(Safety1_x_acc_component_AtSnap),
            Safety1_y_acc_component_AtSnap = max(Safety1_y_acc_component_AtSnap),
            Safety1_Orientation_AtSnap = max(Safety1_Orientation_AtSnap), Safety1_Direction_AtSnap = max(Safety1_Direction_AtSnap),
            Safety1_X_3SecBeforeSnap = max(Safety1_X_3SecBeforeSnap), Safety1_Y_3SecBeforeSnap = max(Safety1_Y_3SecBeforeSnap), 
            Safety1_VertCreptDistance = max(Safety1_VertCreptDistance), Safety1_TotalCreptDistance_TowardBall = max(Safety1_TotalCreptDistance_TowardBall),
            Safety1_PosGroup = max(Safety1_PosGroup), Safety1_position = max(Safety1_position),
            x_spline_basis1_p1 = max(x_spline_basis1_p1), x_spline_basis2_p1 = max(x_spline_basis2_p1), 
            x_spline_basis3_p1 = max(x_spline_basis3_p1), x_spline_basis4_p1 = max(x_spline_basis4_p1),
            x_spline_basis5_p1 = max(x_spline_basis5_p1), # x_spline_basis6_p1 = max(x_spline_basis6_p1),                       
         #  x_spline_basis7_p1 = max(x_spline_basis7_p1), x_spline_basis8_p1 = max(x_spline_basis8_p1),                     
         #  x_spline_basis9_p1 = max(x_spline_basis9_p1), x_spline_basis10_p1 = max(x_spline_basis10_p1),                   
            y_spline_basis1_p1 = max(y_spline_basis1_p1), y_spline_basis2_p1 = max(y_spline_basis2_p1),          
            y_spline_basis3_p1 = max(y_spline_basis3_p1), y_spline_basis4_p1 = max(y_spline_basis4_p1),                  
            y_spline_basis5_p1 = max(y_spline_basis5_p1), # y_spline_basis6_p1 = max(y_spline_basis6_p1),                 
         #  y_spline_basis7_p1 = max(y_spline_basis7_p1), y_spline_basis8_p1 = max(y_spline_basis8_p1),                  
         #  y_spline_basis9_p1 = max(y_spline_basis9_p1), y_spline_basis10_p1 = max(y_spline_basis10_p1),                  
            Safety2_Initial_X = Safety2_Initial_X[1], Safety2_Initial_Y = Safety2_Initial_Y[1], 
            Safety2_Max_PreSnap_PreSnapSpeed = max(Safety2_Max_PreSnapSpeed), Safety2_Avg_PreSnapSpeed = mean(Safety2_Avg_PreSnapSpeed),
            Safety2_Max_PreSnapAcceleration = max(Safety2_Max_PreSnapAcceleration), 
            Safety2_Avg_PreSnapAcceleration = mean(Safety2_Avg_PreSnapAcceleration),
            Safety2_Max_PreSnap_x_vel_component = max(Safety2_Max_PreSnap_x_vel_component), 
            Safety2_Max_PreSnap_y_vel_component = max(Safety2_Max_PreSnap_y_vel_component), 
            Safety2_Max_PreSnap_x_acc_component = max(Safety2_Max_PreSnap_x_acc_component), 
            Safety2_Max_PreSnap_y_acc_component = max(Safety2_Max_PreSnap_y_acc_component),
            Safety2_Min_PreSnap_x_vel_component = min(Safety2_Min_PreSnap_x_vel_component), 
            Safety2_Min_PreSnap_y_vel_component = min(Safety2_Min_PreSnap_y_vel_component), 
            Safety2_Min_PreSnap_x_acc_component = min(Safety2_Min_PreSnap_x_acc_component), 
            Safety2_Min_PreSnap_y_acc_component = min(Safety2_Min_PreSnap_y_acc_component),
            Safety2_Mean_PreSnap_x_vel_component = mean(Safety2_Mean_PreSnap_x_vel_component), 
            Safety2_Mean_PreSnap_y_vel_component = mean(Safety2_Mean_PreSnap_y_vel_component), 
            Safety2_Mean_PreSnap_x_acc_component = mean(Safety2_Mean_PreSnap_x_acc_component), 
            Safety2_Mean_PreSnap_y_acc_component = mean(Safety2_Mean_PreSnap_y_acc_component), 
            Safety2_Tot_PreSnapDistance = sum(Safety2_Tot_PreSnapDistance), Safety2_InitialOrientation = Safety2_InitialOrientation[1],
            Safety2_InitialDirection = Safety2_InitialDirection[1], Safety2_Initial_X_DistFromBall = Safety2_Initial_X_DistFromBall[1],
            Safety2_Initial_Y_DistFromBall = Safety2_Initial_Y_DistFromBall[1], Safety2_Initial_Tot_DistFromBall = Safety2_Initial_Tot_DistFromBall[1],
            Safety2_Initial_Y_DistFromMOF = Safety2_Initial_Y_DistFromMOF[1], Safety2_Initial_Y_AbsDistFromMOF = Safety2_Initial_Y_AbsDistFromMOF[1],
            Safety2_Max_PreSnap_X_DistFromBall = max(Safety2_Max_PreSnap_X_DistFromBall),
            Safety2_Max_PreSnap_Y_DistFromBall = max(Safety2_Max_PreSnap_Y_DistFromBall), 
            Safety2_Min_PreSnap_Y_DistFromBall = min(Safety2_Min_PreSnap_Y_DistFromBall), 
            Safety2_Max_PreSnap_Y_AbsDistFromBall = max(Safety2_Max_PreSnap_Y_AbsDistFromBall), 
            Safety2_Max_PreSnap_Tot_DistFromBall = max(Safety2_Max_PreSnap_Tot_DistFromBall),
            Safety2_X_DistFromBall_AtSnap = max(Safety2_X_DistFromBall_AtSnap),
            Safety2_Y_DistFromBall_AtSnap = max(Safety2_Y_DistFromBall_AtSnap),
            Safety2_Y_AbsDistFromBall_AtSnap = max(Safety2_Y_AbsDistFromBall_AtSnap),
            Safety2_Y_DistFromMOF_AtSnap = max(Safety2_Y_DistFromMOF_AtSnap),
            Safety2_Y_AbsDistFromMOF_AtSnap = max(Safety2_Y_AbsDistFromMOF_AtSnap),
            Safety2_Tot_DistFromBall_AtSnap = max(Safety2_Tot_DistFromBall_AtSnap),
            Safety2_Speed_AtSnap = max(Safety2_Speed_AtSnap), Safety2_Acceleration_AtSnap = max(Safety2_Acceleration_AtSnap),
            Safety2_x_vel_component_AtSnap = max(Safety2_x_vel_component_AtSnap),
            Safety2_y_vel_component_AtSnap = max(Safety2_y_vel_component_AtSnap),
            Safety2_x_acc_component_AtSnap = max(Safety2_x_acc_component_AtSnap),
            Safety2_y_acc_component_AtSnap = max(Safety2_y_acc_component_AtSnap),
            Safety2_Orientation_AtSnap = max(Safety2_Orientation_AtSnap), Safety2_Direction_AtSnap = max(Safety2_Direction_AtSnap),
            Safety2_X_3SecBeforeSnap = max(Safety2_X_3SecBeforeSnap), Safety2_Y_3SecBeforeSnap = max(Safety2_Y_3SecBeforeSnap), 
            Safety2_VertCreptDistance = max(Safety2_VertCreptDistance), Safety2_TotalCreptDistance_TowardBall = max(Safety2_TotalCreptDistance_TowardBall),
            Safety2_PosGroup = max(Safety2_PosGroup), Safety2_position = max(Safety2_position),
            x_spline_basis1_p2 = max(x_spline_basis1_p2), x_spline_basis2_p2 = max(x_spline_basis2_p2), 
            x_spline_basis3_p2 = max(x_spline_basis3_p2), x_spline_basis4_p2 = max(x_spline_basis4_p2),
            x_spline_basis5_p2 = max(x_spline_basis5_p2), # x_spline_basis6_p2 = max(x_spline_basis6_p2),                       
          #  x_spline_basis7_p2 = max(x_spline_basis7_p2), x_spline_basis8_p2 = max(x_spline_basis8_p2),                     
          #  x_spline_basis9_p2 = max(x_spline_basis9_p2), x_spline_basis10_p2 = max(x_spline_basis10_p2),                   
            y_spline_basis1_p2 = max(y_spline_basis1_p2), y_spline_basis2_p2 = max(y_spline_basis2_p2),          
            y_spline_basis3_p2 = max(y_spline_basis3_p2), y_spline_basis4_p2 = max(y_spline_basis4_p2),                  
            y_spline_basis5_p2 = max(y_spline_basis5_p2)) # y_spline_basis6_p2 = max(y_spline_basis6_p2),                 
          #  y_spline_basis7_p2 = max(y_spline_basis7_p2), y_spline_basis8_p2 = max(y_spline_basis8_p2),                  
          #  y_spline_basis9_p2 = max(y_spline_basis9_p2), y_spline_basis10_p2 = max(y_spline_basis10_p2))

Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>%
  mutate(Off_TD = ifelse(!is.na(td_team) & td_team == PosTeam, 1,
                              ifelse(is.na(td_team) | td_team != PosTeam, 0, NA)))

# And add the single-snap entropy value to both data sets
Stats_ByPlayerAndPlay_Final <- Stats_ByPlayerAndPlay_Final %>% 
  mutate(Snap_Entropy = -MOFO_probability*log(MOFO_probability, 2) - (1 - MOFO_probability)*log((1-MOFO_probability), 2))
Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>% 
  mutate(Snap_Entropy = -MOFO_probability*log(MOFO_probability, 2) - (1 - MOFO_probability)*log((1-MOFO_probability), 2))

Median_Entropy <- median(Stats_ByFullPlay_Final$Snap_Entropy)

Stats_ByPlayerAndPlay_Final <- Stats_ByPlayerAndPlay_Final %>% 
  mutate(HighEntropy = ifelse(Snap_Entropy > Median_Entropy, "High Entropy", "Low Entropy"))
Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>% 
  mutate(HighEntropy = ifelse(Snap_Entropy > Median_Entropy, "High Entropy", "Low Entropy"))

Stats_ByPlayerAndPlay_Final <- Stats_ByPlayerAndPlay_Final %>% 
  mutate(HighEntropy_Num = ifelse(Snap_Entropy > Median_Entropy, 1, 0))
Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>% 
  mutate(HighEntropy_Num = ifelse(Snap_Entropy > Median_Entropy, 1, 0))

# For the sake of simplicity, define "disguised" as different number of safeties before and after the snap
Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>% mutate(Disguise = ifelse(num_safeties_pre_snap != num_safeties_post_snap, "Disguise", "No Disguise"))
Stats_ByFullPlay_Final <- Stats_ByFullPlay_Final %>% mutate(Disguise_Num = ifelse(num_safeties_pre_snap != num_safeties_post_snap, 1, 0))

# These are for if/when we want to make confidence intervals
# Recall, Bernoulli is binary variable (i.e. use for proportions)
SD_Bernoulli <- function(x){
  mu <- mean(x, na.rm = TRUE)
  return( sqrt( (mu*(1 - mu)) ))
}

SE_Bernoulli <- function(x){
  mu <- mean(x, na.rm = TRUE)
  return( sqrt( (mu*(1 - mu))/(length(x)) ) )
}

ConfBand_Bernoulli <- function(x) {
  return(1.96*SE_Bernoulli(x))
}

upper_Bernoulli <- function(x) {
  mean(x, na.rm = TRUE) + ConfBand_Bernoulli(x)
}

lower_Bernoulli <- function(x) {
  mean(x, na.rm = TRUE) - ConfBand_Bernoulli(x)
}

# Make separate formula for continuous variables
SE_Continuous <- function(x){
  SD <- sd(x, na.rm = TRUE)
  return( SD/sqrt((length(x))) )
}

ConfBand_Continuous <- function(x) {
  return(1.96*SE_Continuous(x))
}

upper_Continuous <- function(x) {
  mean(x, na.rm = TRUE) + ConfBand_Continuous(x)
}

lower_Continuous <- function(x) {
  mean(x, na.rm = TRUE) - ConfBand_Continuous(x)
}

# Interesting play-level stats: does offense perform notably worse against disguised or high-entropy coverages?
# Start out with basic performance on disguised vs. non-disguised dropbacks ... don't group by team to start
PlaySuccess_DisguiseVsNone_NFLWide <- Stats_ByFullPlay_Final %>% filter(!is.na(Disguise)) %>%
  group_by(Disguise) %>%
  summarize(Dropbacks = n(), YPP = mean(NetYardage), TD = sum(Off_TD), AvgEPA = mean(EPA, na.rm = TRUE), EPSuccessRate = mean(EPSuccess, na.rm = TRUE), FirstDownRate = mean(first_down, na.rm = TRUE),
            LCI_YPP = lower_Continuous(NetYardage), UCI_YPP = upper_Continuous(NetYardage),
            LCI_EPA = lower_Continuous(EPA), UCI_EPA = upper_Continuous(EPA),
            LCI_EPSuccess = ifelse(lower_Bernoulli(EPSuccess) >= 0, lower_Bernoulli(EPSuccess), 0), 
            UCI_EPSuccess = ifelse(upper_Bernoulli(EPSuccess) <= 1, upper_Bernoulli(EPSuccess), 1),
            LCI_FirstDown = ifelse(lower_Bernoulli(first_down) >= 0, lower_Bernoulli(first_down), 0), 
            UCI_FirstDown = ifelse(upper_Bernoulli(first_down) <= 1, upper_Bernoulli(first_down), 1))
# View(PlaySuccess_DisguiseVsNone_NFLWide)

# See how reactable() looks
# Function to count the maximum number of decimal places in a numeric column, for reactable() purposes
# This isn't necessary if we don't care about how many significant digits show up
max_decimals <- function(x) {
  x <- na.omit(x)
  if (length(x) == 0) return(0)
  max(sapply(x, function(y) {
    if (floor(y) == y) {
      return(0)
    } else {
      nchar(strsplit(as.character(y), "\\.")[[1]][2])
    }
  }))
}

# Now, create reactable with that conditional formatting
reactable(PlaySuccess_DisguiseVsNone_NFLWide, defaultPageSize = 20, columns = map(PlaySuccess_DisguiseVsNone_NFLWide, ~ if (is.numeric(.x) && max_decimals(.x) > 3) {
  colDef(format = colFormat(digits = 3))
} else {
  colDef()
}))

Plot1 <- PlaySuccess_DisguiseVsNone_NFLWide %>%
  ggplot(aes(x = Disguise, y = AvgEPA)) +
  geom_bar(stat = "identity", position = "dodge", fill = "red") +
  labs(x = "Safety Disguise?", y = "Avg EPA Allowed",
       title = "Average EPA Allowed, by Whether Coverage was Disguised",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = " ") +
  geom_abline(intercept = 0, slope = 0, color = "darkgreen", lty = 2) +
  # geom_errorbar(aes(ymin = LCI_EPA, ymax = UCI_EPA), position = "dodge", color = "black") +
  #   scale_y_continuous(breaks = seq(3, 8, 1)) +
  #   coord_cartesian(ylim = c(3, 8)) +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

Plot2 <- PlaySuccess_DisguiseVsNone_NFLWide %>%
  ggplot(aes(x = Disguise, y = EPSuccessRate)) +
  geom_bar(stat = "identity", position = "dodge", fill = "black") +
  labs(x = "Safety Disguise?", y = "Success Rate Allowed",
       title = "Success Rate Allowed, by Whether Coverage was Disguised",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = "Disguise: different number of pre-snap and post-snap safeties") +
  geom_abline(intercept = 0.5, slope = 0, color = "darkgreen", lty = 2) +
  geom_errorbar(aes(ymin = LCI_EPSuccess, ymax = UCI_EPSuccess), position = "dodge", color = "red") +
  scale_y_continuous(breaks = seq(0, 1, 0.2), labels = scales::percent_format(accuracy = 5L)) +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5)) +
  annotate("text", label = glue("Dotted Line: 50%"),
           y = 0.51, x = 1, size = 3, color = "darkgreen")

grid.arrange(Plot1, Plot2, ncol = 2)

# And a similar version of that, which groups by disguise AND # of pre-snap safeties
PlaySuccess_DisguiseAndSafeties_NFLWide <- Stats_ByFullPlay_Final %>% filter(!is.na(Disguise)) %>%
  group_by(Disguise, num_safeties_pre_snap) %>%
  summarize(Dropbacks = n(), YPP = mean(NetYardage), TD = sum(Off_TD), AvgEPA = mean(EPA, na.rm = TRUE), EPSuccessRate = mean(EPSuccess, na.rm = TRUE), FirstDownRate = mean(first_down, na.rm = TRUE),
            LCI_YPP = lower_Continuous(NetYardage), UCI_YPP = upper_Continuous(NetYardage),
            LCI_EPA = lower_Continuous(EPA), UCI_EPA = upper_Continuous(EPA),
            LCI_EPSuccess = ifelse(lower_Bernoulli(EPSuccess) >= 0, lower_Bernoulli(EPSuccess), 0), 
            UCI_EPSuccess = ifelse(upper_Bernoulli(EPSuccess) <= 1, upper_Bernoulli(EPSuccess), 1),
            LCI_FirstDown = ifelse(lower_Bernoulli(first_down) >= 0, lower_Bernoulli(first_down), 0), 
            UCI_FirstDown = ifelse(upper_Bernoulli(first_down) <= 1, upper_Bernoulli(first_down), 1))
# View(PlaySuccess_DisguiseAndSafeties_NFLWide)

PlaySuccess_DisguiseAndSafeties_NFLWide <- PlaySuccess_DisguiseAndSafeties_NFLWide %>% 
  mutate(PreSnapSafeties_Graph = case_when(
    num_safeties_pre_snap == 1 ~ "1 Pre-Snap Safety",
    num_safeties_pre_snap == 2 ~ "2 Pre-Snap Safeties")) 

Plot3 <- PlaySuccess_DisguiseAndSafeties_NFLWide %>%
  ggplot(aes(x = Disguise, y = AvgEPA)) +
  geom_bar(stat = "identity", position = "dodge", fill = "red") +
  labs(x = "Safety Disguise?", y = "Avg EPA Allowed",
       title = "Average EPA Allowed, by Whether Coverage was Disguised",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = " ") +
  geom_abline(intercept = 0, slope = 0, color = "darkgreen", lty = 2) +
  # geom_errorbar(aes(ymin = LCI_EPA, ymax = UCI_EPA), position = "dodge", color = "black") +
  #   scale_y_continuous(breaks = seq(3, 8, 1)) +
  #   coord_cartesian(ylim = c(3, 8)) +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5)) + facet_wrap(~PreSnapSafeties_Graph)

Plot4 <- PlaySuccess_DisguiseAndSafeties_NFLWide %>%
  ggplot(aes(x = Disguise, y = EPSuccessRate)) +
  geom_bar(stat = "identity", position = "dodge", fill = "black") +
  labs(x = "Safety Disguise?", y = "Success Rate Allowed",
       title = "Success Rate Allowed, by Whether Coverage was Disguised",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = "Disguise: different number of pre-snap and post-snap safeties") +
  geom_abline(intercept = 0.5, slope = 0, color = "darkgreen", lty = 2) +
  geom_errorbar(aes(ymin = LCI_EPSuccess, ymax = UCI_EPSuccess), position = "dodge", color = "red") +
  scale_y_continuous(breaks = seq(0, 1, 0.2), labels = scales::percent_format(accuracy = 5L)) +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5)) +
  annotate("text", label = glue("Dotted Line: 50%"),
           y = 0.51, x = 2, size = 3, color = "darkgreen") + facet_wrap(~PreSnapSafeties_Graph)

grid.arrange(Plot3, Plot4, ncol = 2)

# Now incorporate team defense into the equation
PlaySuccess_DisguiseVsNone_ByDefTeam <- Stats_ByFullPlay_Final %>% filter(!is.na(Disguise)) %>%
  group_by(DefTeam, Disguise) %>% 
  summarize(Dropbacks = n(), YPP = mean(NetYardage), TotYds = sum(NetYardage), TD = sum(Off_TD), TotEPA = sum(EPA), AvgEPA = mean(EPA, na.rm = TRUE), EPSuccessRate = mean(EPSuccess), FirstDownRate = mean(first_down, na.rm = TRUE)) %>% arrange(DefTeam, Disguise)
# View(PlaySuccess_DisguiseVsNone_ByDefTeam)

PlaySuccess_OnDisguises_ByTeam <- PlaySuccess_DisguiseVsNone_ByDefTeam %>% filter(Disguise %in% "Disguise")
# View(PlaySuccess_OnDisguises_ByTeam)

# For help with barplot + logos: https://nflplotr.nflverse.com/articles/nflplotR.html
Plot5 <- PlaySuccess_OnDisguises_ByTeam %>%
  ggplot(aes(x = reorder(DefTeam, AvgEPA), y = AvgEPA)) +
  # geom_bar(stat = "identity", position = "dodge", fill = "black") + ... that's how we would include bars and team logos
  # geom_image(aes(x = reorder(DefTeam, AvgEPA), y = AvgEPA, image = Team), size = 0.05, asp = asp_ratio) + ... this line was to get images if we had NGS data
  nflplotR::geom_nfl_logos(aes(team_abbr = DefTeam), width = 0.065, alpha = 1) +
  # geom_text_repel(aes(x = reorder(DefTeam, AvgEPA), y = AvgEPA), size = 2.5) +
  # scale_y_continuous(breaks = seq(30, 60, 10)) +
  labs(x = "Team Logo", y = "Average EPA Allowed", 
       title = "Average EPA Allowed on Disguised Coverages",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = "Disguise: different number of pre-snap and post-snap safeties") +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        axis.text.x = element_text(size = 0, face = "bold")) #, margin = margin(10, 0, 0, 0))) +
  annotate("text", label = glue("Negative Value is Good for Defense"),
           y = 0.52, x = 1.5, size = 3, color = "darkgreen") 
# The axis.text.x is so that the actual team names don't show up

# Use tab_options() w/ gt package for fancy tables for highest rate of disguised coverages and lowest EPA allowed on disguised dropbacks
# First, gotta establish the "DisguiseRate" metric for each team, and sort in descending order
DisguiseRate_Leaders <- Stats_ByFullPlay_Final %>% filter(!is.na(Disguise)) %>%
  group_by(DefTeam) %>% 
  summarize(Dropbacks = n(), DisguiseRate = mean(Disguise_Num), YPP = mean(NetYardage), TotYds = sum(NetYardage), TD = sum(Off_TD), 
            TotEPA = sum(EPA), AvgEPA = mean(EPA, na.rm = TRUE), EPSuccessRate = mean(EPSuccess), FirstDownRate = mean(first_down, na.rm = TRUE)) %>% 
  arrange(desc(DisguiseRate))

class(DisguiseRate_Leaders) <- "data.frame"
DisguiseRate_FancyTable <- DisguiseRate_Leaders %>%
  select(c("DefTeam", "Dropbacks", "AvgEPA", "DisguiseRate")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(desc(DisguiseRate))) %>%
  select("Rank", 1:4)

DisguiseRate_FancyTable <- DisguiseRate_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "Dropbacks", "AvgEPA", "DisguiseRate") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(DisguiseRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 3,
  ) |>
  data_color(
    columns = c(DisguiseRate),
    colors = scales::col_numeric(
      palette = c("#FEE0D2", "#67000D"),
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    DefTeam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**Dropbacks**"),
    AvgEPA = md("**Avg EPA on All Dropbacks**"),
    DisguiseRate = html('<span style="text-decoration:overline; font-weight:bold">Disguise Rate</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:DisguiseRate
  ) |> 
  tab_header(md("**Top 20 Teams in Disguised Coverage Rate**"),
             md("(Early Downs, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA: good for defense. Disguise: different # of pre-snap and post-snap safeties",
    locations = cells_column_labels(
      columns = DisguiseRate
    )
  )

# Add now make it so that the team logos replace the tricodes
DisguiseRate_FancyTable <- DisguiseRate_FancyTable %>%
  nflplotR::gt_nfl_logos(columns = "DefTeam")

gtsave(DisguiseRate_FancyTable, "DisguiseRate_FancyTable.png")

# Now use gt package for lowest EPA allowed on disguised dropbacks
# Recall that PlaySuccess_OnDisguises_ByTeam exists, but we still need to arrange it (ASCENDING in this case, b/c defense wants low EPA allowed)
PlaySuccess_OnDisguises_Leaders <- PlaySuccess_OnDisguises_ByTeam %>% arrange(AvgEPA)

class(PlaySuccess_OnDisguises_Leaders) <- "data.frame"
DisguiseSuccess_FancyTable <- PlaySuccess_OnDisguises_Leaders %>%
  select(c("DefTeam", "Dropbacks", "EPSuccessRate", "AvgEPA")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(AvgEPA)) %>% # DON'T use desc() in this case
  select("Rank", 1:4)

DisguiseSuccess_FancyTable <- DisguiseSuccess_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "Dropbacks", "EPSuccessRate", "AvgEPA") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(EPSuccessRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPA),
    colors = scales::col_numeric(
      palette = c("darkgreen", "lightgreen"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    DefTeam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**Disguised Dropbacks**"),
    EPSuccessRate = md("**Success Rate Allowed**"),
    AvgEPA = html('<span style="text-decoration:overline; font-weight:bold">Avg EPA Allowed</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:AvgEPA
  ) |> 
  tab_header(md("**Top 20 Teams in Avg EPA Allowed on Disguised Coverages**"),
             md("(Early Downs, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA: good for defense. Disguise: different # of pre-snap and post-snap safeties",
    locations = cells_column_labels(
      columns = AvgEPA
    )
  )

# Add now make it so that the team logos replace the tricodes
DisguiseSuccess_FancyTable <- DisguiseSuccess_FancyTable %>%
  nflplotR::gt_nfl_logos(columns = "DefTeam")

gtsave(DisguiseSuccess_FancyTable, "DisguiseSuccess_FancyTable.png")

# And here's how to view both gt tables simultaneously
library(htmltools)
combined_tables_disguise <- tags$div(
  style = "display: flex; justify-content: space-between;",
  tags$div(style = "margin-right: 20px;", DisguiseRate_FancyTable),
  tags$div(DisguiseSuccess_FancyTable)
)

# View in RStudio's Viewer or save as HTML
browsable(combined_tables_disguise)

# Save the combined tables to an HTML file
save_html(combined_tables_disguise, "combined_tables_disguise.html")

# Take a screenshot of the HTML and save it as a PNG
webshot("combined_tables_disguise.html", "combined_tables_disguise.png", vwidth = 1200, vheight = 600)

# Let's also look into the disguised vs. non-disguised gap for teams
# Recall that PlaySuccess_OnDisguises_ByTeam already exists
PlaySuccess_WithoutDisguise_ByTeam <- PlaySuccess_DisguiseVsNone_ByDefTeam %>% filter(!Disguise %in% "Disguise")
# View(PlaySuccess_WithoutDisguise_ByTeam)

# Get rid of "Disguise" column for each of them
PlaySuccess_OnDisguises_ByTeam <- PlaySuccess_OnDisguises_ByTeam %>% select(-"Disguise")
PlaySuccess_WithoutDisguise_ByTeam <- PlaySuccess_WithoutDisguise_ByTeam %>% select(-"Disguise")

# Now merge() them by DefTeam
PlaySuccess_WithVsWithoutDisguise_ByTeam <- 
  merge(x = PlaySuccess_OnDisguises_ByTeam, y = PlaySuccess_WithoutDisguise_ByTeam, by = "DefTeam")

PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(Dropbacks_Disguise = `Dropbacks.x`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(YPP_Disguise = `YPP.x`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(TotYds_Disguise = `TotYds.x`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(TD_Disguise = `TD.x`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(TotEPA_Disguise = `TotEPA.x`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(AvgEPA_Disguise = `AvgEPA.x`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(SuccessRate_Disguise = `EPSuccessRate.x`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(FirstDownRate_Disguise = `FirstDownRate.x`)

PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(Dropbacks_NoDisguise = `Dropbacks.y`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(YPP_NoDisguise = `YPP.y`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(TotYds_NoDisguise = `TotYds.y`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(TD_NoDisguise = `TD.y`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(TotEPA_NoDisguise = `TotEPA.y`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(AvgEPA_NoDisguise = `AvgEPA.y`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(SuccessRate_NoDisguise = `EPSuccessRate.y`)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  rename(FirstDownRate_NoDisguise = `FirstDownRate.y`)

PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  mutate(YPPGap = YPP_Disguise - YPP_NoDisguise)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  mutate(AvgEPAGap = AvgEPA_Disguise - AvgEPA_NoDisguise)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  mutate(SuccessRateGap = SuccessRate_Disguise - SuccessRate_NoDisguise)

# This is leaderboard of LOWEST YPP gap (b/c we want to look at which defenses have better numbers when disguising)
# View(PlaySuccess_WithVsWithoutDisguise_ByTeam %>% arrange(YPPGap) %>% select(1:3, "YPP_Disguise", "YPP_NoDisguise", "YPPGap"))

# This is leaderboard of LOWEST AvgEPA gap (b/c we want to look at which defenses have better numbers when disguising)
# View(PlaySuccess_WithVsWithoutDisguise_ByTeam %>% arrange(AvgEPAGap) %>% select(1:3, "AvgEPA_Disguise", "AvgEPA_NoDisguise", "AvgEPAGap"))

# Now use gt package for which defenses improve the most when disguising, via AvgEPA
# Arrange PlaySuccess_WithVsWithoutDisguise_ByTeam (ASCENDING in this case, b/c we want to see which defenses get better when disguising)
PlaySuccess_WithVsWithoutDisguise_ByTeam <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>% arrange(AvgEPAGap)

class(PlaySuccess_WithVsWithoutDisguise_ByTeam) <- "data.frame"
DisguiseVsNoDisguise_ByTeam_FancyTable <- PlaySuccess_WithVsWithoutDisguise_ByTeam %>%
  select(c("DefTeam", "Dropbacks_Disguise", "Dropbacks_NoDisguise", "AvgEPA_Disguise", "AvgEPA_NoDisguise", "AvgEPAGap")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(AvgEPAGap)) %>% # DON'T use desc() in this case
  select("Rank", 1:6)

DisguiseVsNoDisguise_ByTeam_FancyTable <- DisguiseVsNoDisguise_ByTeam_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "DefTeam", "Dropbacks_Disguise", "Dropbacks_NoDisguise", "AvgEPA_Disguise", "AvgEPA_NoDisguise", "AvgEPAGap") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(AvgEPA_Disguise),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA_NoDisguise),
    decimals = 2,
  ) |>
 fmt_number(
    columns = c(AvgEPAGap),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPAGap),
    colors = scales::col_numeric(
      palette = c("darkred", "pink"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    DefTeam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks_Disguise = md("**Disguised Dropbacks**"),
    Dropbacks_NoDisguise = md("**Non-Disguised Dropbacks**"),
    AvgEPA_Disguise = md("**Avg Disguised EPA**"),
    AvgEPA_NoDisguise = md("**Avg Non-Disguised EPA**"),
    AvgEPAGap = html('<span style="text-decoration:overline; font-weight:bold">Difference</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks_Disguise:AvgEPAGap
  ) |> 
  tab_header(md("**Top 20 Gaps in Avg EPA Allowed With vs. Without Disguised Coverages**"),
             md("(Early Downs, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Lower gap: better with disguises. Disguise: different # of pre-snap and post-snap safeties",
    locations = cells_column_labels(
      columns = AvgEPAGap
    )
  )

# Add now make it so that the team logos replace the tricodes
DisguiseVsNoDisguise_ByTeam_FancyTable <- DisguiseVsNoDisguise_ByTeam_FancyTable %>%
  nflplotR::gt_nfl_logos(columns = "DefTeam")

gtsave(DisguiseVsNoDisguise_ByTeam_FancyTable, "DisguiseVsNoDisguise_ByTeam_FancyTable.png")

# Replicate all of the above tables with the HighEntropy variable
# Start out with basic performance on disguised vs. non-disguised dropbacks ... don't group by team to start
PlaySuccess_HighEntropyVsNone_NFLWide <- Stats_ByFullPlay_Final %>% filter(!is.na(HighEntropy)) %>%
  group_by(HighEntropy) %>%
  summarize(Dropbacks = n(), YPP = mean(NetYardage), TD = sum(Off_TD), AvgEPA = mean(EPA, na.rm = TRUE), EPSuccessRate = mean(EPSuccess, na.rm = TRUE), FirstDownRate = mean(first_down, na.rm = TRUE),
            LCI_YPP = lower_Continuous(NetYardage), UCI_YPP = upper_Continuous(NetYardage),
            LCI_EPA = lower_Continuous(EPA), UCI_EPA = upper_Continuous(EPA),
            LCI_EPSuccess = ifelse(lower_Bernoulli(EPSuccess) >= 0, lower_Bernoulli(EPSuccess), 0), 
            UCI_EPSuccess = ifelse(upper_Bernoulli(EPSuccess) <= 1, upper_Bernoulli(EPSuccess), 1),
            LCI_FirstDown = ifelse(lower_Bernoulli(first_down) >= 0, lower_Bernoulli(first_down), 0), 
            UCI_FirstDown = ifelse(upper_Bernoulli(first_down) <= 1, upper_Bernoulli(first_down), 1))
# View(PlaySuccess_HighEntropyVsNone_NFLWide)

# See how reactable() looks
# Function to count the maximum number of decimal places in a numeric column, for reactable() purposes
# This isn't necessary if we don't care about how many significant digits show up
max_decimals <- function(x) {
  x <- na.omit(x)
  if (length(x) == 0) return(0)
  max(sapply(x, function(y) {
    if (floor(y) == y) {
      return(0)
    } else {
      nchar(strsplit(as.character(y), "\\.")[[1]][2])
    }
  }))
}

# Now, create reactable with that conditional formatting
reactable(PlaySuccess_HighEntropyVsNone_NFLWide, defaultPageSize = 20, columns = map(PlaySuccess_HighEntropyVsNone_NFLWide, ~ if (is.numeric(.x) && max_decimals(.x) > 3) {
  colDef(format = colFormat(digits = 3))
} else {
  colDef()
}))

Plot1B <- PlaySuccess_HighEntropyVsNone_NFLWide %>%
  ggplot(aes(x = HighEntropy, y = AvgEPA)) +
  geom_bar(stat = "identity", position = "dodge", fill = "red") +
  labs(x = "Safety Entropy", y = "Avg EPA Allowed",
       title = "Average EPA Allowed on Dropbacks, by Safety Entropy",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = " ") +
  geom_abline(intercept = 0, slope = 0, color = "darkgreen", lty = 2) +
  # geom_errorbar(aes(ymin = LCI_EPA, ymax = UCI_EPA), position = "dodge", color = "black") +
  #   scale_y_continuous(breaks = seq(3, 8, 1)) +
  #   coord_cartesian(ylim = c(3, 8)) +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

Plot2B <- PlaySuccess_HighEntropyVsNone_NFLWide %>%
  ggplot(aes(x = HighEntropy, y = EPSuccessRate)) +
  geom_bar(stat = "identity", position = "dodge", fill = "black") +
  labs(x = "Safety Entropy", y = "Success Rate Allowed",
       title = "Success Rate Allowed on Dropbacks, by Safety Entropy",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = "High Safety Entropy: entropy higher than median") +
  geom_abline(intercept = 0.5, slope = 0, color = "darkgreen", lty = 2) +
  geom_errorbar(aes(ymin = LCI_EPSuccess, ymax = UCI_EPSuccess), position = "dodge", color = "red") +
  scale_y_continuous(breaks = seq(0, 1, 0.2), labels = scales::percent_format(accuracy = 5L)) +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5)) +
  annotate("text", label = glue("Dotted Line: 50%"),
           y = 0.51, x = 1, size = 3, color = "darkgreen")

grid.arrange(Plot1B, Plot2B, ncol = 2)

# And a similar version of that, which groups by HighEntropy AND # of pre-snap safeties
PlaySuccess_HighEntropyAndSafeties_NFLWide <- Stats_ByFullPlay_Final %>% filter(!is.na(HighEntropy)) %>%
  group_by(HighEntropy, num_safeties_pre_snap) %>%
  summarize(Dropbacks = n(), YPP = mean(NetYardage), TD = sum(Off_TD), AvgEPA = mean(EPA, na.rm = TRUE), EPSuccessRate = mean(EPSuccess, na.rm = TRUE), FirstDownRate = mean(first_down, na.rm = TRUE),
            LCI_YPP = lower_Continuous(NetYardage), UCI_YPP = upper_Continuous(NetYardage),
            LCI_EPA = lower_Continuous(EPA), UCI_EPA = upper_Continuous(EPA),
            LCI_EPSuccess = ifelse(lower_Bernoulli(EPSuccess) >= 0, lower_Bernoulli(EPSuccess), 0), 
            UCI_EPSuccess = ifelse(upper_Bernoulli(EPSuccess) <= 1, upper_Bernoulli(EPSuccess), 1),
            LCI_FirstDown = ifelse(lower_Bernoulli(first_down) >= 0, lower_Bernoulli(first_down), 0), 
            UCI_FirstDown = ifelse(upper_Bernoulli(first_down) <= 1, upper_Bernoulli(first_down), 1))
# View(PlaySuccess_HighEntropyAndSafeties_NFLWide)

PlaySuccess_HighEntropyAndSafeties_NFLWide <- PlaySuccess_HighEntropyAndSafeties_NFLWide %>% 
  mutate(PreSnapSafeties_Graph = case_when(
    num_safeties_pre_snap == 1 ~ "1 Pre-Snap Safety",
    num_safeties_pre_snap == 2 ~ "2 Pre-Snap Safeties")) 

Plot3B <- PlaySuccess_HighEntropyAndSafeties_NFLWide %>%
  ggplot(aes(x = HighEntropy, y = AvgEPA)) +
  geom_bar(stat = "identity", position = "dodge", fill = "red") +
  labs(x = "Safety Entropy", y = "Avg EPA Allowed",
       title = "Average EPA Allowed on Dropbacks, by Safety Entropy",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = " ") +
  geom_abline(intercept = 0, slope = 0, color = "darkgreen", lty = 2) +
  # geom_errorbar(aes(ymin = LCI_EPA, ymax = UCI_EPA), position = "dodge", color = "black") +
  #   scale_y_continuous(breaks = seq(3, 8, 1)) +
  #   coord_cartesian(ylim = c(3, 8)) +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5)) + facet_wrap(~PreSnapSafeties_Graph)

Plot4B <- PlaySuccess_HighEntropyAndSafeties_NFLWide %>%
  ggplot(aes(x = HighEntropy, y = EPSuccessRate)) +
  geom_bar(stat = "identity", position = "dodge", fill = "black") +
  labs(x = "Safety Entropy", y = "Success Rate Allowed",
       title = "Success Rate Allowed on Dropbacks, by Safety Entropy",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = "High Safety Entropy: entropy higher than median") +
  geom_abline(intercept = 0.5, slope = 0, color = "darkgreen", lty = 2) +
  geom_errorbar(aes(ymin = LCI_EPSuccess, ymax = UCI_EPSuccess), position = "dodge", color = "red") +
  scale_y_continuous(breaks = seq(0, 1, 0.2), labels = scales::percent_format(accuracy = 5L)) +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5)) +
  annotate("text", label = glue("Dotted Line: 50%"),
           y = 0.51, x = 1, size = 3, color = "darkgreen") + facet_wrap(~PreSnapSafeties_Graph)

grid.arrange(Plot3B, Plot4B, ncol = 2)

# Now incorporate team defense into the equation
PlaySuccess_HighEntropyVsNone_ByDefTeam <- Stats_ByFullPlay_Final %>% filter(!is.na(HighEntropy)) %>%
  group_by(DefTeam, HighEntropy) %>% 
  summarize(Dropbacks = n(), YPP = mean(NetYardage), TotYds = sum(NetYardage), TD = sum(Off_TD), TotEPA = sum(EPA), AvgEPA = mean(EPA, na.rm = TRUE), EPSuccessRate = mean(EPSuccess), FirstDownRate = mean(first_down, na.rm = TRUE)) %>% arrange(DefTeam, HighEntropy)
# View(PlaySuccess_HighEntropyVsNone_ByDefTeam)

PlaySuccess_HighEntropy_ByTeam <- PlaySuccess_HighEntropyVsNone_ByDefTeam %>% filter(HighEntropy %in% "High Entropy")
# View(PlaySuccess_HighEntropy_ByTeam)

# For help with barplot + logos: https://nflplotr.nflverse.com/articles/nflplotR.html
Plot5B <- PlaySuccess_HighEntropy_ByTeam %>%
  ggplot(aes(x = reorder(DefTeam, AvgEPA), y = AvgEPA)) +
  # geom_bar(stat = "identity", position = "dodge", fill = "black") + ... that's how we would include bars and team logos
  # geom_image(aes(x = reorder(DefTeam, AvgEPA), y = AvgEPA, image = Team), size = 0.05, asp = asp_ratio) + ... this line was to get images if we had NGS data
  nflplotR::geom_nfl_logos(aes(team_abbr = DefTeam), width = 0.065, alpha = 1) +
  # geom_text_repel(aes(x = reorder(DefTeam, AvgEPA), y = AvgEPA), size = 2.5) +
  # scale_y_continuous(breaks = seq(30, 60, 10)) +
  labs(x = "Team Logo", y = "Average EPA Allowed", 
       title = "Average EPA Allowed on High-Entropy Dropbacks",
       subtitle = "Weeks 1-9, 2022, Early Downs with 5+ Yards To Go (n = 4,381)",
       caption = "High Safety Entropy: entropy higher than median") +
  theme_bw() +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        axis.text.x = element_text(size = 0, face = "bold")) #, margin = margin(10, 0, 0, 0))) +
annotate("text", label = glue("Negative Value is Good for Defense"),
         y = 0.52, x = 1.5, size = 3, color = "darkgreen") 
# The axis.text.x is so that the actual team names don't show up

# Use tab_options() w/ gt package for fancy tables for highest average entropy rate and lowest EPA allowed on high-entropy dropbacks
# First, gotta establish the "AvgEntropyRate" metric for each team, and sort in descending order
AvgEntropy_Leaders <- Stats_ByFullPlay_Final %>% filter(!is.na(HighEntropy)) %>%
  group_by(DefTeam) %>% 
  summarize(Dropbacks = n(), AvgEntropy = mean(Snap_Entropy), YPP = mean(NetYardage), TotYds = sum(NetYardage), TD = sum(Off_TD), 
            TotEPA = sum(EPA), AvgEPA = mean(EPA, na.rm = TRUE), EPSuccessRate = mean(EPSuccess), FirstDownRate = mean(first_down, na.rm = TRUE)) %>% 
  arrange(desc(AvgEntropy))

class(AvgEntropy_Leaders) <- "data.frame"
AvgEntropy_FancyTable <- AvgEntropy_Leaders %>%
  select(c("DefTeam", "Dropbacks", "AvgEPA", "AvgEntropy")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(desc(AvgEntropy))) %>%
  select("Rank", 1:4)

AvgEntropy_FancyTable <- AvgEntropy_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "Dropbacks", "AvgEPA", "AvgEntropy") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(AvgEntropy),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 3,
  ) |>
  data_color(
    columns = c(AvgEntropy),
    colors = scales::col_numeric(
      palette = c("#FEE0D2", "#67000D"),
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    DefTeam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**Dropbacks**"),
    AvgEPA = md("**Avg EPA on All Dropbacks**"),
    AvgEntropy = html('<span style="text-decoration:overline; font-weight:bold">Avg Safety Entropy</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:AvgEntropy
  ) |> 
  tab_header(md("**Top 20 Teams in Mean Safety Entropy**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA: good for defense. Higher Safety Entropy: safeties are more disguised",
    locations = cells_column_labels(
      columns = AvgEntropy
    )
  )

# Add now make it so that the team logos replace the tricodes
AvgEntropy_FancyTable <- AvgEntropy_FancyTable %>%
  nflplotR::gt_nfl_logos(columns = "DefTeam")

gtsave(AvgEntropy_FancyTable, "AvgEntropy_FancyTable.png")

# Now use gt package for lowest EPA allowed on high-entropy dropbacks
# Recall that PlaySuccess_HighEntropy_ByTeam exists, but we still need to arrange it (ASCENDING in this case, b/c defense wants low EPA allowed)
PlaySuccess_HighEntropy_Leaders <- PlaySuccess_HighEntropy_ByTeam %>% arrange(AvgEPA)

class(PlaySuccess_HighEntropy_Leaders) <- "data.frame"
HighEntropySuccess_FancyTable <- PlaySuccess_HighEntropy_Leaders %>%
  select(c("DefTeam", "Dropbacks", "EPSuccessRate", "AvgEPA")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(AvgEPA)) %>% # DON'T use desc() in this case
  select("Rank", 1:4)

HighEntropySuccess_FancyTable <- HighEntropySuccess_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "Dropbacks", "EPSuccessRate", "AvgEPA") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(EPSuccessRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPA),
    colors = scales::col_numeric(
      palette = c("darkgreen", "lightgreen"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    DefTeam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**High-Entropy Dropbacks**"),
    EPSuccessRate = md("**Success Rate Allowed**"),
    AvgEPA = html('<span style="text-decoration:overline; font-weight:bold">Avg EPA Allowed</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:AvgEPA
  ) |> 
  tab_header(md("**Top 20 Teams in Avg EPA Allowed on High-Entropy Coverages**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA: good for defense. High-Entropy: above median",
    locations = cells_column_labels(
      columns = AvgEPA
    )
  )

# Add now make it so that the team logos replace the tricodes
HighEntropySuccess_FancyTable <- HighEntropySuccess_FancyTable %>%
  nflplotR::gt_nfl_logos(columns = "DefTeam")

gtsave(HighEntropySuccess_FancyTable, "HighEntropySuccess_FancyTable.png")

# And here's how to view both gt tables simultaneously
combined_tables_entropy <- tags$div(
  style = "display: flex; justify-content: space-between;",
  tags$div(style = "margin-right: 20px;", AvgEntropy_FancyTable),
  tags$div(HighEntropySuccess_FancyTable)
)

# View in RStudio's Viewer or save as HTML
browsable(combined_tables_entropy)

# Save the combined tables to an HTML file
save_html(combined_tables_entropy, "combined_tables_entropy.html")

# Take a screenshot of the HTML and save it as a PNG
webshot("combined_tables_entropy.html", "combined_tables_entropy.png", vwidth = 1200, vheight = 600)

# Let's also look into the high-entropy vs. low-entropy gap in performance for teams
# Recall that PlaySuccess_HighEntropy_ByTeam already exists
PlaySuccess_LowEntropy_ByTeam <- PlaySuccess_HighEntropyVsNone_ByDefTeam %>% filter(!HighEntropy %in% "High Entropy")
# View(PlaySuccess_LowEntropy_ByTeam)

# Get rid of "HighEntropy" column for each of them
PlaySuccess_HighEntropy_ByTeam <- PlaySuccess_HighEntropy_ByTeam %>% select(-"HighEntropy")
PlaySuccess_LowEntropy_ByTeam <- PlaySuccess_LowEntropy_ByTeam %>% select(-"HighEntropy")

# Now merge() them by DefTeam
PlaySuccess_HighVsLowEntropy_ByTeam <- 
  merge(x = PlaySuccess_HighEntropy_ByTeam, y = PlaySuccess_LowEntropy_ByTeam, by = "DefTeam")

PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(Dropbacks_HighEntropy = `Dropbacks.x`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(YPP_HighEntropy = `YPP.x`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(TotYds_HighEntropy = `TotYds.x`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(TD_HighEntropy = `TD.x`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(TotEPA_HighEntropy = `TotEPA.x`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(AvgEPA_HighEntropy = `AvgEPA.x`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(SuccessRate_HighEntropy = `EPSuccessRate.x`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(FirstDownRate_HighEntropy = `FirstDownRate.x`)

PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(Dropbacks_LowEntropy = `Dropbacks.y`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(YPP_LowEntropy = `YPP.y`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(TotYds_LowEntropy = `TotYds.y`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(TD_LowEntropy = `TD.y`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(TotEPA_LowEntropy = `TotEPA.y`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(AvgEPA_LowEntropy = `AvgEPA.y`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(SuccessRate_LowEntropy = `EPSuccessRate.y`)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  rename(FirstDownRate_LowEntropy = `FirstDownRate.y`)

PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  mutate(YPPGap = YPP_HighEntropy - YPP_LowEntropy)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  mutate(AvgEPAGap = AvgEPA_HighEntropy - AvgEPA_LowEntropy)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  mutate(SuccessRateGap = SuccessRate_HighEntropy - SuccessRate_LowEntropy)

# This is leaderboard of LOWEST YPP gap (b/c we want to look at which defenses have better numbers when disguising)
# View(PlaySuccess_HighVsLowEntropy_ByTeam %>% arrange(YPPGap) %>% select(1:3, "YPP_HighEntropy", "YPP_LowEntropy", "YPPGap"))

# This is leaderboard of LOWEST AvgEPA gap (b/c we want to look at which defenses have better numbers when disguising)
# View(PlaySuccess_HighVsLowEntropy_ByTeam %>% arrange(AvgEPAGap) %>% select(1:3, "AvgEPA_HighEntropy", "AvgEPA_LowEntropy", "AvgEPAGap"))

# Now use gt package for which defenses improve the most with high entropy, via AvgEPA
# Arrange PlaySuccess_HighVsLowEntropy_ByTeam (ASCENDING in this case, b/c we want to see which defenses get better when disguising)
PlaySuccess_HighVsLowEntropy_ByTeam <- PlaySuccess_HighVsLowEntropy_ByTeam %>% arrange(AvgEPAGap)

class(PlaySuccess_HighVsLowEntropy_ByTeam) <- "data.frame"
HighVsLowEntropy_ByTeam_FancyTable <- PlaySuccess_HighVsLowEntropy_ByTeam %>%
  select(c("DefTeam", "Dropbacks_HighEntropy", "Dropbacks_LowEntropy", "AvgEPA_HighEntropy", "AvgEPA_LowEntropy", "AvgEPAGap")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(AvgEPAGap)) %>% # DON'T use desc() in this case
  select("Rank", 1:6)

HighVsLowEntropy_ByTeam_FancyTable <- HighVsLowEntropy_ByTeam_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "DefTeam", "Dropbacks_HighEntropy", "Dropbacks_LowEntropy", "AvgEPA_HighEntropy", "AvgEPA_LowEntropy", "AvgEPAGap") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(AvgEPA_HighEntropy),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA_LowEntropy),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPAGap),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPAGap),
    colors = scales::col_numeric(
      palette = c("darkred", "pink"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    DefTeam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks_HighEntropy = md("**High-Entropy Dropbacks**"),
    Dropbacks_LowEntropy = md("**Low-Entropy Dropbacks**"),
    AvgEPA_HighEntropy = md("**Avg High-Entropy EPA**"),
    AvgEPA_LowEntropy = md("**Avg Low-Entropy EPA**"),
    AvgEPAGap = html('<span style="text-decoration:overline; font-weight:bold">Difference</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks_HighEntropy:AvgEPAGap
  ) |> 
  tab_header(md("**Top 20 Gaps in Avg EPA Allowed With vs. Without High Entropy**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Lower gap: better with high entropy. High Safety Entropy: entropy higher than median",
    locations = cells_column_labels(
      columns = AvgEPAGap
    )
  )

# Add now make it so that the team logos replace the tricodes
HighVsLowEntropy_ByTeam_FancyTable <- HighVsLowEntropy_ByTeam_FancyTable %>%
  nflplotR::gt_nfl_logos(columns = "DefTeam")

gtsave(HighVsLowEntropy_ByTeam_FancyTable, "HighVsLowEntropy_ByTeam_FancyTable.png")

# For the hell of it, also try a gt table with View(PlaySuccess_DisguiseVsNone_NFLWide)
PlaySuccess_DisguiseVsNone_NFLWide <- PlaySuccess_DisguiseVsNone_NFLWide %>% arrange(AvgEPA)

class(PlaySuccess_DisguiseVsNone_NFLWide) <- "data.frame"
DisguiseVsNone_NFLWide_FancyTable <- PlaySuccess_DisguiseVsNone_NFLWide %>%
  select(c("Disguise", "Dropbacks", "YPP", "EPSuccessRate", "FirstDownRate", "AvgEPA"))
# head(20) %>% # this is how we would limit to the top 20
# mutate(Rank = row_number(AvgEPA)) %>% # DON'T use desc() in this case
# select("Rank", 1:6)

DisguiseVsNone_NFLWide_FancyTable <- DisguiseVsNone_NFLWide_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "Disguise", "Dropbacks", "YPP", "EPSuccessRate", "FirstDownRate", "AvgEPA") |> 
  head(20) |>
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(YPP),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(EPSuccessRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(FirstDownRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPA),
    colors = scales::col_numeric(
      palette = c("darkred", "pink"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
    # Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    Disguise = md("**Disguise?**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**Dropbacks**"),
    YPP = md("**Yards Per Play**"),
    EPSuccessRate = md("**Success Rate Allowed**"),
    FirstDownRate = md("**First Down Rate**"),
    AvgEPA = html('<span style="text-decoration:overline; font-weight:bold">Avg EPA Allowed</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:AvgEPA
  ) |> 
  tab_header(md("**Base Rate Across NFL: How Defenses Performed With vs. Without Disguised Coverages**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA: good for defense. Disguise: Different # of pre-snap and post-snap safeties",
    locations = cells_column_labels(
      columns = AvgEPA
    )
  )

gtsave(DisguiseVsNone_NFLWide_FancyTable, "DisguiseVsNone_NFLWide_FancyTable.png")

# And also try a gt table with View(PlaySuccess_HighEntropyVsNone_NFLWide)
PlaySuccess_HighEntropyVsNone_NFLWide <- PlaySuccess_HighEntropyVsNone_NFLWide %>% arrange(AvgEPA)

class(PlaySuccess_HighEntropyVsNone_NFLWide) <- "data.frame"
HighVsLowEntropy_NFLWide_FancyTable <- PlaySuccess_HighEntropyVsNone_NFLWide %>%
  select(c("HighEntropy", "Dropbacks", "YPP", "EPSuccessRate", "FirstDownRate", "AvgEPA"))
  # head(20) %>% # this is how we would limit to the top 20
  # mutate(Rank = row_number(AvgEPA)) %>% # DON'T use desc() in this case
  # select("Rank", 1:6)

HighVsLowEntropy_NFLWide_FancyTable <- HighVsLowEntropy_NFLWide_FancyTable |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "HighEntropy", "Dropbacks", "YPP", "EPSuccessRate", "FirstDownRate", "AvgEPA") |> 
  head(20) |>
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(YPP),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(EPSuccessRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(FirstDownRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPA),
    colors = scales::col_numeric(
      palette = c("darkred", "pink"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
   # Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    HighEntropy = md("**Entropy**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**Dropbacks**"),
    YPP = md("**Yards Per Play**"),
    EPSuccessRate = md("**Success Rate Allowed**"),
    FirstDownRate = md("**First Down Rate**"),
    AvgEPA = html('<span style="text-decoration:overline; font-weight:bold">Avg EPA Allowed</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:AvgEPA
  ) |> 
  tab_header(md("**Base Rate Across NFL: How Defenses Performed With vs. Without High Safety Entropy**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA is good for defense. High Safety Entropy: entropy higher than median",
    locations = cells_column_labels(
      columns = AvgEPA
    )
  )

gtsave(HighVsLowEntropy_NFLWide_FancyTable, "HighVsLowEntropy_NFLWide_FancyTable.png")

# If we need to export to CSV
write.csv(final_dropbacks_merged, "final_dropbacks_merged.csv")
write.csv(Stats_ByPlayerAndPlay_Final, "Stats_ByPlayerAndPlay_Final.csv")
write.csv(Stats_ByFullPlay_Final, "Stats_ByFullPlay_Final.csv")

########################### FASTER WAY TO GET "gt" TABLES WITHOUT NEEDING TO READ IN TRACKING DATA ##############################
games <- fread("games.csv")
plays <- fread("plays.csv")

# Convert down into an ordinal factor variable, rather than numeric
# I.e., 2nd down + 2nd down doesn't equal 4th down, the way 2 TD + 2 TD = 4 TD
class(plays$down)
plays <- plays %>% mutate(down = factor(down, ordered = TRUE, levels = c("1", "2", "3", "4")))

nflverse_pbp <- nflfastR::load_pbp(2022)
nflverse_pbp <- nflverse_pbp %>% filter(week %in% 1:9)
# This gives descriptions of NFLVerse columns: View(field_descriptions)

# View(nflverse_pbp %>% filter(run_location == "middle" & !is.na(run_gap)))
# This is empty, meaning all "middle" runs have NA for run_gap - adjust this
nflverse_pbp <- nflverse_pbp %>% mutate(
  run_gap = ifelse(run_location == "middle", "center", run_gap))

table(plays$passResult)
# C means complete, R means scramble, S means sack, IN means interception, I means incomplete
# All others are designed runs
plays <- plays %>% mutate(passResult = 
                            ifelse(passResult %in% c("C", "R", "IN", "I", "S"), passResult, NA))

# Arrange plays so they are sorted chronologically
plays <- plays %>% arrange(gameId, playId)

# The absoluteYardlineNumber is not accurate, just use nflverse's yardline_100
# And yardlineNumber doesn't give full field picture, e.g. -35 and +35 both say 35
# View(plays %>% filter(possessionTeam == yardlineSide & yardlineNumber < 20))
# This shows us all plays when the offensive team is inside its own 20
# Sometimes absoluteYardlineNumber is under 30, sometimes it's more than 100
plays <- plays %>% select(-"absoluteYardlineNumber", -"yardlineNumber", -"yardlineSide")

# Fix one column that is spelled wrong
plays <- plays %>% rename(visitorTeamWinProbabilityAdded = `visitorTeamWinProbilityAdded`)

# View(plays %>% filter(is.na(homeTeamWinProbabilityAdded))) - it's empty
# View(plays %>% filter(is.na(visitorTeamWinProbabilityAdded))) - it's empty

# View(plays %>% filter(is.na(expectedPointsAdded)))
# One play to fix here, a David Montgomery run on 10/09/22
# Since it's only one play, just find the right answer from nflverse
# View(nflverse_pbp %>% filter(old_game_id == 2022100904, qtr == 2))
plays <- plays %>% mutate(expectedPointsAdded =
                            ifelse(is.na(expectedPointsAdded), -0.29447450, expectedPointsAdded))  

# Get rid of all QB kneels and spikes
plays <- plays %>% filter(qbSpike == FALSE | is.na(qbSpike))
plays <- plays %>% filter(qbKneel == 0 | is.na(qbKneel))

# And fix the Cover-6 Right vs. Cover 6-Left error
table(plays$pff_passCoverage)
plays <- plays %>% mutate(pff_passCoverage = 
                            ifelse(!is.na(pff_passCoverage) & pff_passCoverage %in% "Cover 6-Left", "Cover-6 Left", pff_passCoverage))
# View(plays %>% filter(is.na(pff_passCoverage))) ... none of these are dropbacks, and they're mostly QB sneaks

# Mutate whether post-snap safeties were middle-of-field-open (MOFO) or closed (MOFC)
plays <- plays %>% mutate(PostSnap_MOF =
                            ifelse(!is.na(pff_passCoverage) & pff_passCoverage %in% c("Cover-1", "Cover-1 Double", "Cover-3", "Cover-3 Cloud Left", "Cover-3 Cloud Right", "Cover-3 Double Cloud", "Cover-3 Seam"), "MOF Closed",
                                   ifelse(!is.na(pff_passCoverage) & pff_passCoverage %in% c("Cover-0", "Cover-2", "Quarters", "Cover-4", "2-Man", "Cover-6", "Cover-6 Left", "Cover-6 Right"), "MOF Open", 
                                          ifelse(!is.na(pff_passCoverage) & pff_passCoverage %in% c("Bracket", "Goal Line", "Miscellaneous", "Prevent", "Red Zone"), "Ambiguous", NA))))
table(plays$PostSnap_MOF)
# View(plays %>% filter(is.na(PostSnap_MOF)))

# Turn receiver alignment into numeric variable(s), rather than character
table(plays$receiverAlignment) # all have exactly three characters
# Glance at an example of 3x0 so we can diagnose if the numbers mean wide receivers, or eligible receivers
# View(plays %>% filter(receiverAlignment %in% "3x0")); clearly it means eligible receivers, i.e. TEs are included
# Use text analysis to extract from the formations; substr() syntax is substr(x, start, stop)
plays <- plays %>% 
  mutate(aligned_left_receivers = substr(receiverAlignment, 1, 1))
plays <- plays %>% 
  mutate(aligned_right_receivers = substr(receiverAlignment, 3, 3))
class(plays$aligned_left_receivers) <- "numeric"
class(plays$aligned_right_receivers) <- "numeric"
plays <- plays %>% mutate(aligned_total_receivers = aligned_left_receivers + aligned_right_receivers)
plays <- plays %>% relocate(aligned_left_receivers, aligned_right_receivers, aligned_total_receivers, .after = offenseFormation)

# For the sake of simplicity, let's get rid of weird plays with more than 5
# View(plays %>% filter(receiverAlignment %in% "4x2")) ... direct snap to RB can make weird numbers show up
plays <- plays %>% filter(aligned_total_receivers <= 5)

# Then, next obligation is to properly merge everything
# Must change the class of nflverse_pbp to make it compatible with the rest
class(nflverse_pbp) <- c("data.table", "data.frame")

# Also must coerce old_game_id in nflverse into a numeric variable
nflverse_pbp$old_game_id <- as.numeric(nflverse_pbp$old_game_id)

# And coerce down in nflverse to an ordered factor
nflverse_pbp <- nflverse_pbp %>% mutate(down = factor(down, ordered = TRUE, levels = c("1", "2", "3", "4")))

PlaysAndGames <- merge(x = games, y = plays, by = "gameId") 
PlaysAndGames_NFLVerse <- merge(x = PlaysAndGames, y = nflverse_pbp, 
                                by.x = c("gameId", "playId", "season", "week", "down"), 
                                by.y = c("old_game_id", "play_id",  "season", "week", "down")) 
rm(games, plays, nflverse_pbp, PlaysAndGames)

colnames(PlaysAndGames_NFLVerse)
# Make a new version of PlaysAndGames_NFLVerse with fewer columns, to save memory space 
# Note that home_score and away_score in NFLVerse refer to final scores
# Whereas total_home_score and total_away_score are entering that specific play
# Also passLocationType refers to QB's location, pass_location refers to where ball was thrown
# Note that "time" includes game date for the tracking version, but just game clock for NFLVerse version
NFLVerse_Reduced <- PlaysAndGames_NFLVerse %>% 
  select(-c(3, 7, 10:11, 15:19, 31, 43:44, 54:55, 60:63, 67, 69, 73:74, 77, 79:85, 88:90, 
            98:105, 109:112, 119:135, 138:147, 149:151, 153:175, 184, 186:195, 204:205,
            214:218, 226:325, 329:331, 335:340, 347:348, 352, 355:377, 382, 385, 396:401,
            405, 407:416, 418:424))

rm(PlaysAndGames_NFLVerse)
results_df_preds <- fread("results_df_preds.csv")
colnames(results_df_preds)
results_df_preds <- results_df_preds %>% select(-"expectedPoints") # this already exists in NFLVerse
RyanModel_Merged <- merge(x = NFLVerse_Reduced, y = results_df_preds,
                          by = c("gameId", "playId"))
rm(results_df_preds, NFLVerse_Reduced)

# Arrange it by game ID, play ID
# But turn it into a data table so that it takes up less memory space
# RyanModel_Merged <- RyanModel_Merged %>% arrange(gameId, playId)
setDT(RyanModel_Merged)
setkey(RyanModel_Merged, gameId, playId)
RyanModel_Merged <- RyanModel_Merged %>% relocate("gameId", "playId")

# Add a column for offensive TDs
RyanModel_Merged <- RyanModel_Merged %>%
  mutate(Off_TD = ifelse(!is.na(td_team) & td_team == posteam, 1,
                         ifelse(is.na(td_team) | td_team != posteam, 0, NA)))

# And add one for number of post-snap safeties
table(RyanModel_Merged$pff_passCoverage)

RyanModel_Merged <- RyanModel_Merged %>% mutate(num_safeties_post_snap = case_when(
  pff_passCoverage %in% c("Cover-0") ~ 0,
  pff_passCoverage %in% c("Cover-1", "Cover-1 Double", "Cover-3", "Cover-3 Cloud Left", "Cover-3 Cloud Right", "Cover-3 Seam") ~ 1,
  pff_passCoverage %in% c("2-Man", "Cover-2", "Cover-4", "Quarters", "Cover-6 Left", "Cover-6 Right") ~ 2))

RyanModel_Merged <- RyanModel_Merged %>% 
  mutate(Snap_Entropy = -p*log(p, 2) - (1 - p)*log((1-p), 2))

Median_Entropy <- median(RyanModel_Merged$Snap_Entropy)

RyanModel_Merged <- RyanModel_Merged %>% 
  mutate(HighEntropy = ifelse(Snap_Entropy > Median_Entropy, "High Entropy", "Low Entropy"))

RyanModel_Merged <- RyanModel_Merged %>% 
  mutate(HighEntropy_Num = ifelse(Snap_Entropy > Median_Entropy, 1, 0))

RyanModel_Merged <- RyanModel_Merged %>% rename(num_safeties_pre_snap = `num_safeties`)
colnames(RyanModel_Merged)

# These are for if/when we want to make confidence intervals
# Recall, Bernoulli is binary variable (i.e. use for proportions)
SD_Bernoulli <- function(x){
  mu <- mean(x, na.rm = TRUE)
  return( sqrt( (mu*(1 - mu)) ))
}

SE_Bernoulli <- function(x){
  mu <- mean(x, na.rm = TRUE)
  return( sqrt( (mu*(1 - mu))/(length(x)) ) )
}

ConfBand_Bernoulli <- function(x) {
  return(1.96*SE_Bernoulli(x))
}

upper_Bernoulli <- function(x) {
  mean(x, na.rm = TRUE) + ConfBand_Bernoulli(x)
}

lower_Bernoulli <- function(x) {
  mean(x, na.rm = TRUE) - ConfBand_Bernoulli(x)
}

# Make separate formula for continuous variables
SE_Continuous <- function(x){
  SD <- sd(x, na.rm = TRUE)
  return( SD/sqrt((length(x))) )
}

ConfBand_Continuous <- function(x) {
  return(1.96*SE_Continuous(x))
}

upper_Continuous <- function(x) {
  mean(x, na.rm = TRUE) + ConfBand_Continuous(x)
}

lower_Continuous <- function(x) {
  mean(x, na.rm = TRUE) - ConfBand_Continuous(x)
}

# First, gotta establish the "AvgEntropyRate" metric for each team, and sort in descending order
AvgEntropy_Leaders_FULL <- RyanModel_Merged %>% filter(!is.na(HighEntropy)) %>%
  group_by(defteam) %>% 
  summarize(Dropbacks = n(), AvgEntropy = mean(Snap_Entropy), YPP = mean(yardsGained), TotYds = sum(yardsGained), TD = sum(Off_TD), 
            TotEPA = sum(expectedPointsAdded), AvgEPA = mean(expectedPointsAdded, na.rm = TRUE), EPSuccessRate = mean(success), FirstDownRate = mean(first_down, na.rm = TRUE)) %>% 
  arrange(desc(AvgEntropy))

class(AvgEntropy_Leaders_FULL) <- "data.frame"
AvgEntropy_FancyTable_FULL <- AvgEntropy_Leaders_FULL %>%
  select(c("defteam", "Dropbacks", "AvgEPA", "AvgEntropy")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(desc(AvgEntropy))) %>%
  select("Rank", 1:4)

AvgEntropy_FancyTable_FULL <- AvgEntropy_FancyTable_FULL |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "Dropbacks", "AvgEPA", "AvgEntropy") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(AvgEntropy),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 3,
  ) |>
  data_color(
    columns = c(AvgEntropy),
    colors = scales::col_numeric(
      palette = c("#FEE0D2", "#67000D"),
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    defteam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**Dropbacks**"),
    AvgEPA = md("**Avg EPA on All Dropbacks**"),
    AvgEntropy = html('<span style="text-decoration:overline; font-weight:bold">Avg Safety Entropy</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:AvgEntropy
  ) |> 
  tab_header(md("**Top 20 Teams in Mean Safety Entropy**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA: good for defense. Higher Safety Entropy: safeties are more disguised",
    locations = cells_column_labels(
      columns = AvgEntropy
    )
  )

# Add now make it so that the team logos replace the tricodes
AvgEntropy_FancyTable_FULL <- AvgEntropy_FancyTable_FULL %>%
  nflplotR::gt_nfl_logos(columns = "defteam")

gtsave(AvgEntropy_FancyTable_FULL, "AvgEntropy_FancyTable_FULL.png")

# Now use gt package for lowest EPA allowed on high-entropy dropbacks across FULL nine weeks
PlaySuccess_HighEntropyVsNone_ByDefTeam_FULL <- RyanModel_Merged %>% filter(!is.na(HighEntropy)) %>%
  group_by(defteam, HighEntropy) %>% 
  summarize(Dropbacks = n(), YPP = mean(yardsGained), TotYds = sum(yardsGained), TD = sum(Off_TD), 
            TotEPA = sum(expectedPointsAdded), AvgEPA = mean(expectedPointsAdded, na.rm = TRUE), EPSuccessRate = mean(success), FirstDownRate = mean(first_down, na.rm = TRUE)) %>% arrange(defteam, HighEntropy)
# View(PlaySuccess_HighEntropyVsNone_ByDefTeam_FULL)

PlaySuccess_HighEntropy_ByTeam_FULL <- PlaySuccess_HighEntropyVsNone_ByDefTeam_FULL %>% filter(HighEntropy %in% "High Entropy")
# View(PlaySuccess_HighEntropy_ByTeam_FULL)

# Now arrange it (ASCENDING in this case)
PlaySuccess_HighEntropy_Leaders_FULL <- PlaySuccess_HighEntropy_ByTeam_FULL %>% arrange(AvgEPA)

class(PlaySuccess_HighEntropy_Leaders_FULL) <- "data.frame"
HighEntropySuccess_FancyTable_FULL <- PlaySuccess_HighEntropy_Leaders_FULL %>%
  select(c("defteam", "Dropbacks", "EPSuccessRate", "AvgEPA")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(AvgEPA)) %>% # DON'T use desc() in this case
  select("Rank", 1:4)

HighEntropySuccess_FancyTable_FULL <- HighEntropySuccess_FancyTable_FULL |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "Dropbacks", "EPSuccessRate", "AvgEPA") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(EPSuccessRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPA),
    colors = scales::col_numeric(
      palette = c("darkgreen", "lightgreen"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    defteam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**High-Entropy Dropbacks**"),
    EPSuccessRate = md("**Success Rate Allowed**"),
    AvgEPA = html('<span style="text-decoration:overline; font-weight:bold">Avg EPA Allowed</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:AvgEPA
  ) |> 
  tab_header(md("**Top 20 Teams in Avg EPA Allowed on High-Entropy Coverages**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA: good for defense. High-Entropy: above median",
    locations = cells_column_labels(
      columns = AvgEPA
    )
  )

# Add now make it so that the team logos replace the tricodes
HighEntropySuccess_FancyTable_FULL <- HighEntropySuccess_FancyTable_FULL %>%
  nflplotR::gt_nfl_logos(columns = "defteam")

gtsave(HighEntropySuccess_FancyTable_FULL, "HighEntropySuccess_FancyTable_FULL.png")

# And here's how to view both gt tables simultaneously
combined_tables_entropy_FULL <- tags$div(
  style = "display: flex; justify-content: space-between;",
  tags$div(style = "margin-right: 20px;", AvgEntropy_FancyTable_FULL),
  tags$div(HighEntropySuccess_FancyTable_FULL)
)

# View in RStudio's Viewer or save as HTML
browsable(combined_tables_entropy_FULL)

# Save the combined tables to an HTML file
save_html(combined_tables_entropy_FULL, "combined_tables_entropy_FULL.html")

# Take a screenshot of the HTML and save it as a PNG
webshot("combined_tables_entropy_FULL.html", "combined_tables_entropy_FULL.png", vwidth = 1200, vheight = 600)

# Let's also look into the high-entropy vs. low-entropy gap in performance for teams
# Recall that PlaySuccess_HighEntropy_ByTeam_FULL already exists
PlaySuccess_LowEntropy_ByTeam_FULL <- PlaySuccess_HighEntropyVsNone_ByDefTeam_FULL %>% filter(!HighEntropy %in% "High Entropy")
# View(PlaySuccess_LowEntropy_ByTeam_FULL)

# Get rid of "HighEntropy" column for each of them
PlaySuccess_HighEntropy_ByTeam_FULL <- PlaySuccess_HighEntropy_ByTeam_FULL %>% select(-"HighEntropy")
PlaySuccess_LowEntropy_ByTeam_FULL <- PlaySuccess_LowEntropy_ByTeam_FULL %>% select(-"HighEntropy")

# Now merge() them by defteam
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- 
  merge(x = PlaySuccess_HighEntropy_ByTeam_FULL, y = PlaySuccess_LowEntropy_ByTeam_FULL, by = "defteam")

PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(Dropbacks_HighEntropy = `Dropbacks.x`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(YPP_HighEntropy = `YPP.x`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(TotYds_HighEntropy = `TotYds.x`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(TD_HighEntropy = `TD.x`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(TotEPA_HighEntropy = `TotEPA.x`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(AvgEPA_HighEntropy = `AvgEPA.x`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(SuccessRate_HighEntropy = `EPSuccessRate.x`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(FirstDownRate_HighEntropy = `FirstDownRate.x`)

PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(Dropbacks_LowEntropy = `Dropbacks.y`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(YPP_LowEntropy = `YPP.y`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(TotYds_LowEntropy = `TotYds.y`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(TD_LowEntropy = `TD.y`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(TotEPA_LowEntropy = `TotEPA.y`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(AvgEPA_LowEntropy = `AvgEPA.y`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(SuccessRate_LowEntropy = `EPSuccessRate.y`)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  rename(FirstDownRate_LowEntropy = `FirstDownRate.y`)

PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  mutate(YPPGap = YPP_HighEntropy - YPP_LowEntropy)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  mutate(AvgEPAGap = AvgEPA_HighEntropy - AvgEPA_LowEntropy)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  mutate(SuccessRateGap = SuccessRate_HighEntropy - SuccessRate_LowEntropy)

# This is leaderboard of LOWEST YPP gap (b/c we want to look at which defenses have better numbers when disguising)
# View(PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>% arrange(YPPGap) %>% select(1:3, "YPP_HighEntropy", "YPP_LowEntropy", "YPPGap"))

# This is leaderboard of LOWEST AvgEPA gap (b/c we want to look at which defenses have better numbers when disguising)
# View(PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>% arrange(AvgEPAGap) %>% select(1:3, "AvgEPA_HighEntropy", "AvgEPA_LowEntropy", "AvgEPAGap"))

# Now use gt package for which defenses improve the most with high entropy, via AvgEPA
# Arrange PlaySuccess_HighVsLowEntropy_ByTeam_FULL (ASCENDING in this case, b/c we want to see which defenses get better when disguising)
PlaySuccess_HighVsLowEntropy_ByTeam_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>% arrange(AvgEPAGap)

class(PlaySuccess_HighVsLowEntropy_ByTeam_FULL) <- "data.frame"
HighVsLowEntropy_ByTeam_FancyTable_FULL <- PlaySuccess_HighVsLowEntropy_ByTeam_FULL %>%
  select(c("defteam", "Dropbacks_HighEntropy", "Dropbacks_LowEntropy", "AvgEPA_HighEntropy", "AvgEPA_LowEntropy", "AvgEPAGap")) %>%
  head(20) %>% # this is how we limit to the top 20
  mutate(Rank = row_number(AvgEPAGap)) %>% # DON'T use desc() in this case
  select("Rank", 1:6)

HighVsLowEntropy_ByTeam_FancyTable_FULL <- HighVsLowEntropy_ByTeam_FancyTable_FULL |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "defteam", "Dropbacks_HighEntropy", "Dropbacks_LowEntropy", "AvgEPA_HighEntropy", "AvgEPA_LowEntropy", "AvgEPAGap") |> 
  head(20) |> 
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(AvgEPA_HighEntropy),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA_LowEntropy),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPAGap),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPAGap),
    colors = scales::col_numeric(
      palette = c("darkred", "pink"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
    Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    defteam = md("**Team**"),
    # officialPosition = md("**Position**"),
    Dropbacks_HighEntropy = md("**High-Entropy Dropbacks**"),
    Dropbacks_LowEntropy = md("**Low-Entropy Dropbacks**"),
    AvgEPA_HighEntropy = md("**Avg High-Entropy EPA**"),
    AvgEPA_LowEntropy = md("**Avg Low-Entropy EPA**"),
    AvgEPAGap = html('<span style="text-decoration:overline; font-weight:bold">Difference</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks_HighEntropy:AvgEPAGap
  ) |> 
  tab_header(md("**Top 20 Gaps in Avg EPA Allowed With vs. Without High Entropy**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Lower gap: better with high entropy. High Safety Entropy: entropy higher than median",
    locations = cells_column_labels(
      columns = AvgEPAGap
    )
  )

# Add now make it so that the team logos replace the tricodes
HighVsLowEntropy_ByTeam_FancyTable_FULL <- HighVsLowEntropy_ByTeam_FancyTable_FULL %>%
  nflplotR::gt_nfl_logos(columns = "defteam")

gtsave(HighVsLowEntropy_ByTeam_FancyTable_FULL, "HighVsLowEntropy_ByTeam_FancyTable_FULL.png")

# Create "FULL" data for how NFL teams performed with vs. without high entropy
PlaySuccess_HighEntropyVsNone_NFLWide_FULL <- RyanModel_Merged %>% filter(!is.na(HighEntropy)) %>%
  group_by(HighEntropy) %>%
  summarize(Dropbacks = n(), YPP = mean(yardsGained), TD = sum(Off_TD), AvgEPA = mean(expectedPointsAdded, na.rm = TRUE), 
            EPSuccessRate = mean(success, na.rm = TRUE), FirstDownRate = mean(first_down, na.rm = TRUE),
            LCI_YPP = lower_Continuous(yardsGained), UCI_YPP = upper_Continuous(yardsGained),
            LCI_EPA = lower_Continuous(expectedPointsAdded), UCI_EPA = upper_Continuous(expectedPointsAdded),
            LCI_EPSuccess = ifelse(lower_Bernoulli(success) >= 0, lower_Bernoulli(success), 0), 
            UCI_EPSuccess = ifelse(upper_Bernoulli(success) <= 1, upper_Bernoulli(success), 1),
            LCI_FirstDown = ifelse(lower_Bernoulli(first_down) >= 0, lower_Bernoulli(first_down), 0), 
            UCI_FirstDown = ifelse(upper_Bernoulli(first_down) <= 1, upper_Bernoulli(first_down), 1))
# View(PlaySuccess_HighEntropyVsNone_NFLWide_FULL)

# Now use that "FULL" data to make gt table about high-entropy vs. low-entropy plays across the league
PlaySuccess_HighEntropyVsNone_NFLWide_FULL <- PlaySuccess_HighEntropyVsNone_NFLWide_FULL %>% arrange(AvgEPA)

class(PlaySuccess_HighEntropyVsNone_NFLWide_FULL) <- "data.frame"
HighVsLowEntropy_NFLWide_FancyTable_FULL <- PlaySuccess_HighEntropyVsNone_NFLWide_FULL %>%
  select(c("HighEntropy", "Dropbacks", "YPP", "EPSuccessRate", "FirstDownRate", "AvgEPA"))
# head(20) %>% # this is how we would limit to the top 20
# mutate(Rank = row_number(AvgEPA)) %>% # DON'T use desc() in this case
# select("Rank", 1:6)

HighVsLowEntropy_NFLWide_FancyTable_FULL <- HighVsLowEntropy_NFLWide_FancyTable_FULL |>
  # filter(officialPosition %in% c("OLB", "DE")) |> 
  # mutate(rank = row_number()) |> 
  # select(1:4, "HighEntropy", "Dropbacks", "YPP", "EPSuccessRate", "FirstDownRate", "AvgEPA") |> 
  head(20) |>
  gt() |>
  tab_options(
    table.border.top.color = "white",
    row.striping.include_table_body = FALSE
  ) |>
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) |>
  fmt_number(
    columns = c(YPP),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(EPSuccessRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(FirstDownRate),
    decimals = 2,
  ) |>
  fmt_number(
    columns = c(AvgEPA),
    decimals = 2,
  ) |>
  data_color(
    columns = c(AvgEPA),
    colors = scales::col_numeric(
      palette = c("darkred", "pink"), # Because we are going in ascending order, have dark column on the left
      domain = NULL
    )
  ) |> 
  cols_label(
    # Rank = md("**Rank**"), # the md is what makes the headers show up as bold
    HighEntropy = md("**Entropy**"),
    # officialPosition = md("**Position**"),
    Dropbacks = md("**Dropbacks**"),
    YPP = md("**Yards Per Play**"),
    EPSuccessRate = md("**Success Rate Allowed**"),
    FirstDownRate = md("**First Down Rate**"),
    AvgEPA = html('<span style="text-decoration:overline; font-weight:bold">Avg EPA Allowed</span>')
  ) |> 
  cols_align(
    align = "center",
    columns = Dropbacks:AvgEPA
  ) |> 
  tab_header(md("**Base Rate Across NFL: How Defenses Performed With vs. Without High Safety Entropy**"),
             md("(Early Down Dropbacks, 5+ Yards to Go: Weeks 1-9, 2022)")) |> # don't forget to adjust your minimum
  tab_style(style = cell_borders(sides = "top"),
            locations = cells_title("title")) |> 
  tab_options(
    table.border.top.style = "a"
  ) |> 
  tab_footnote(
    footnote = "Low EPA is good for defense. High Safety Entropy: entropy higher than median",
    locations = cells_column_labels(
      columns = AvgEPA
    )
  )

gtsave(HighVsLowEntropy_NFLWide_FancyTable_FULL, "HighVsLowEntropy_NFLWide_FancyTable_FULL.png")

# If needed, here's how to export to a CSV
write.csv(Stats_ByPlayerAndPlay_Final, "Stats_ByPlayerAndPlay_Final.csv")
write.csv(Stats_ByFullPlay_Final, "Stats_ByFullPlay_Final.csv")
